name: Documentation Maintenance

on:
  # Run weekly to check for documentation health
  schedule:
    - cron: '0 2 * * 1'  # Monday at 2 AM UTC
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      check_external_links:
        description: 'Check external links (slow)'
        required: false
        default: 'false'
        type: boolean

# Grant permissions to create issues
permissions:
  contents: read
  issues: write

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'docs/requirements.txt'
        
    - name: Install dependencies
      working-directory: docs
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install linkchecker
        
    - name: Build documentation
      working-directory: docs
      run: mkdocs build --strict
      
    - name: Check external links
      if: github.event.inputs.check_external_links == 'true' || github.event_name == 'schedule'
      run: |
        cd docs/site
        python -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Check all links including external ones
        linkchecker --no-warnings --timeout=30 --threads=5 http://localhost:8000 > link_report.txt 2>&1 || true
        
        # Stop the server
        kill $SERVER_PID
        
        # Display results
        cat link_report.txt
        
        # Check if there were any broken links
        if grep -q "ERROR" link_report.txt; then
          echo "‚ùå Broken external links found!"
          echo "::warning::Some external links are broken. Please review the link report."
        else
          echo "‚úÖ All external links are working!"
        fi
        
    - name: Check Markdown link syntax
      working-directory: docs/src
      run: |
        echo "Checking Markdown link syntax..."
        
        # Find all markdown files and check for common link issues
        find . -name "*.md" -type f | while read file; do
          echo "Checking $file..."
          
          # Check for malformed links
          if grep -n "\]\([^)]*$\|[^(]*\[" "$file"; then
            echo "‚ùå Malformed links found in $file"
          fi
          
          # Check for empty links
          if grep -n "\]\(\)" "$file"; then
            echo "‚ùå Empty links found in $file"
          fi
          
          # Check for links to non-existent local files
          grep -n "\](.*\.md)" "$file" | while IFS: read -r line_num link_line; do
            # Extract the file path from the link
            link_path=$(echo "$link_line" | sed -n 's/.*](\([^)]*\.md\).*/\1/p')
            if [ -n "$link_path" ] && [ ! -f "$(dirname "$file")/$link_path" ]; then
              echo "‚ùå Broken local link in $file:$line_num -> $link_path"
            fi
          done
        done
        
    - name: Check documentation completeness
      working-directory: docs/src
      run: |
        echo "Checking documentation completeness..."
        
        # Check for sections that might need content
        echo "## Files with potential placeholder content:"
        grep -r -l "TODO\|FIXME\|under development\|coming soon" . --include="*.md" || echo "None found"
        
        echo -e "\n## Short files that might need more content:"
        find . -name "*.md" -type f -exec wc -l {} \; | awk '$1 < 20 {print $1 " lines: " $2}' | sort -n
        
        echo -e "\n## Missing index files:"
        find . -type d | while read dir; do
          if [ "$dir" != "." ] && [ ! -f "$dir/index.md" ]; then
            echo "Missing index.md in: $dir"
          fi
        done
        
    - name: Generate documentation metrics
      working-directory: docs/src
      run: |
        echo "## üìä Documentation Metrics" > /tmp/doc_metrics.md
        echo "" >> /tmp/doc_metrics.md
        
        # Count files and lines
        total_files=$(find . -name "*.md" -type f | wc -l)
        total_lines=$(find . -name "*.md" -type f -exec wc -l {} \; | awk '{sum += $1} END {print sum}')
        
        echo "- **Total Markdown files**: $total_files" >> /tmp/doc_metrics.md
        echo "- **Total lines of documentation**: $total_lines" >> /tmp/doc_metrics.md
        echo "- **Average lines per file**: $((total_lines / total_files))" >> /tmp/doc_metrics.md
        
        # Count sections
        user_guide_files=$(find user-guide -name "*.md" -type f 2>/dev/null | wc -l || echo "0")
        developer_guide_files=$(find developer-guide -name "*.md" -type f 2>/dev/null | wc -l || echo "0")
        api_files=$(find api -name "*.md" -type f 2>/dev/null | wc -l || echo "0")
        
        echo "- **User Guide sections**: $user_guide_files" >> /tmp/doc_metrics.md
        echo "- **Developer Guide sections**: $developer_guide_files" >> /tmp/doc_metrics.md
        echo "- **API Reference sections**: $api_files" >> /tmp/doc_metrics.md
        
        echo "" >> /tmp/doc_metrics.md
        echo "### üìà File Size Distribution" >> /tmp/doc_metrics.md
        echo "" >> /tmp/doc_metrics.md
        echo "| Size Range | Count |" >> /tmp/doc_metrics.md
        echo "|------------|-------|" >> /tmp/doc_metrics.md
        
        small=$(find . -name "*.md" -type f -exec wc -l {} \; | awk '$1 < 50' | wc -l)
        medium=$(find . -name "*.md" -type f -exec wc -l {} \; | awk '$1 >= 50 && $1 < 200' | wc -l)
        large=$(find . -name "*.md" -type f -exec wc -l {} \; | awk '$1 >= 200' | wc -l)
        
        echo "| Small (< 50 lines) | $small |" >> /tmp/doc_metrics.md
        echo "| Medium (50-200 lines) | $medium |" >> /tmp/doc_metrics.md
        echo "| Large (200+ lines) | $large |" >> /tmp/doc_metrics.md
        
        echo "" >> /tmp/doc_metrics.md
        echo "*Generated on $(date)*" >> /tmp/doc_metrics.md
        
        # Display the metrics
        cat /tmp/doc_metrics.md
        
    - name: Upload documentation report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-health-report
        path: |
          /tmp/doc_metrics.md
          docs/site/link_report.txt
        retention-days: 30
        
    - name: Create issue for broken links
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üìö Documentation Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Documentation Health Check Report
          
          The automated documentation health check has detected issues that need attention.
          
          ### üîç What was checked:
          - External link validity
          - Markdown syntax
          - Documentation completeness
          - File structure
          
          ### üõ†Ô∏è Action Required:
          1. Review the workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}
          2. Download the documentation health report artifact
          3. Fix any broken links or structural issues
          4. Update placeholder content if needed
          
          ### üìã Next Steps:
          - [ ] Review broken links
          - [ ] Fix any structural issues
          - [ ] Update placeholder content
          - [ ] Re-run the health check
          
          This issue was automatically created by the documentation maintenance workflow.
          `;
          
          // Check if a similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['documentation', 'automated'],
            state: 'open'
          });
          
          const hasOpenHealthCheckIssue = existingIssues.data.some(issue => 
            issue.title.includes('Documentation Health Check Failed')
          );
          
          if (!hasOpenHealthCheckIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['documentation', 'automated', 'maintenance']
            });
          }

  # Check for outdated dependencies in documentation requirements
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Check for outdated documentation dependencies
      working-directory: docs
      run: |
        pip install pip-audit
        
        echo "## üîç Documentation Dependency Security Check"
        pip-audit -r requirements.txt --desc || true
        
        echo -e "\n## üì¶ Checking for outdated packages"
        pip install -r requirements.txt
        pip list --outdated || true
        
    - name: Create PR for dependency updates
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          // This is a placeholder for creating automated dependency update PRs
          // In a real scenario, you might want to integrate with tools like Dependabot
          console.log('Dependency check completed. Consider setting up Dependabot for automated updates.');

  # Generate and update documentation metrics badge
  metrics-badge:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Calculate documentation metrics
      working-directory: docs/src
      run: |
        # Calculate total documentation coverage
        total_files=$(find . -name "*.md" -type f | wc -l)
        total_lines=$(find . -name "*.md" -type f -exec wc -l {} \; | awk '{sum += $1} END {print sum}')
        
        # Calculate coverage score (this is a simple heuristic)
        # You might want to customize this based on your requirements
        if [ $total_lines -gt 5000 ]; then
          coverage="excellent"
          color="brightgreen"
        elif [ $total_lines -gt 3000 ]; then
          coverage="good"
          color="green"
        elif [ $total_lines -gt 1500 ]; then
          coverage="fair"
          color="yellow"
        else
          coverage="needs-work"
          color="orange"
        fi
        
        echo "DOCS_COVERAGE=$coverage" >> $GITHUB_ENV
        echo "BADGE_COLOR=$color" >> $GITHUB_ENV
        echo "TOTAL_LINES=$total_lines" >> $GITHUB_ENV
        
    - name: Create documentation coverage badge
      uses: actions/github-script@v7
      with:
        script: |
          // This could be used to update a documentation coverage badge
          // For now, we'll just log the metrics
          console.log(`Documentation Coverage: ${process.env.DOCS_COVERAGE}`);
          console.log(`Total Lines: ${process.env.TOTAL_LINES}`);
          console.log(`Badge Color: ${process.env.BADGE_COLOR}`);