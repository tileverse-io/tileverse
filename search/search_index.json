{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tileverse","text":"<p>A comprehensive Java library ecosystem for working with geospatial tiles, cloud-optimized formats, and efficient data access.</p>"},{"location":"#overview","title":"Overview","text":"<p>Tileverse is a modular collection of libraries designed for building high-performance geospatial applications. It provides everything from low-level efficient data access to high-level tile format support, with a focus on cloud-native architectures and modern Java practices.</p>"},{"location":"#libraries","title":"Libraries","text":""},{"location":"#range-reader","title":"\ud83c\udf10 Range Reader","text":"<p>Efficient random access to byte ranges from local files, HTTP servers, and cloud storage (S3, Azure Blob, Google Cloud Storage).</p> <p>Key Features:</p> <ul> <li>Universal API for multiple data sources</li> <li>Multi-level caching (memory + disk)</li> <li>Block alignment optimization</li> <li>Thread-safe concurrent access</li> <li>HTTP authentication support</li> </ul> <p> Learn More</p>"},{"location":"#pmtiles","title":"\ud83d\uddfa\ufe0f PMTiles","text":"<p>Reading and writing PMTiles archives - a cloud-optimized format for map tiles.</p> <p>Key Features:</p> <ul> <li>PMTiles v3 format support</li> <li>Hilbert curve spatial indexing</li> <li>Cloud-optimized access patterns</li> <li>Memory-efficient streaming</li> <li>Vector and raster tile support</li> </ul> <p> Learn More</p>"},{"location":"#tile-matrix-set","title":"\ud83d\udcd0 Tile Matrix Set","text":"<p>Generic object model for defining tile pyramids and tiling schemes.</p> <p>Key Features:</p> <ul> <li>Standard tile matrix set definitions</li> <li>Coordinate transformations</li> <li>Flexible tiling schemes</li> <li>Web Mercator, WGS84, and custom CRS support</li> </ul> <p> Learn More</p>"},{"location":"#vector-tiles","title":"\ud83c\udfa8 Vector Tiles","text":"<p>Encoding and decoding Mapbox Vector Tiles (MVT).</p> <p>Key Features:</p> <ul> <li>MVT format encoding/decoding</li> <li>Protocol Buffers support</li> <li>Geometry transformations</li> <li>Layer and feature manipulation</li> </ul> <p> Learn More</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with Tileverse in minutes:</p> <ul> <li> <p> Quick Start</p> <p>Jump right in with installation and basic examples.</p> <p> Getting Started</p> </li> <li> <p> Architecture</p> <p>Understand how the modules fit together.</p> <p> Architecture</p> </li> <li> <p> Source Code</p> <p>Browse the source code on GitHub.</p> <p> GitHub</p> </li> <li> <p> Maven Central</p> <p>Find published artifacts and versions.</p> <p> Maven Central</p> </li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Geospatial Servers: Build high-performance tile servers (GeoServer, MapServer plugins)</li> <li>Cloud-Native Applications: Efficient access to tiles stored in S3, Azure, or GCS</li> <li>Map Rendering: Client and server-side map tile rendering</li> <li>Data Processing: ETL pipelines for geospatial data transformation</li> <li>Analytics: Random access to large geospatial datasets</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Java 17+ (runtime)</li> <li>Java 21+ (development - recommended)</li> <li>Maven 3.9+ or Gradle 7.0+ (build)</li> </ul>"},{"location":"#license","title":"License","text":"<p>All Tileverse libraries are released under the Apache License 2.0.</p> <p>Built with \u2764\ufe0f by Multiversio LLC and Camptocamp for the geospatial community.</p>"},{"location":"getting-started/","title":"Getting Started with Tileverse","text":"<p>This guide will help you get started with the Tileverse libraries in your Java project.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>All Tileverse modules are published to Maven Central. The easiest way to use them is through the Tileverse BOM (Bill of Materials), which manages all module versions consistently.</p>"},{"location":"getting-started/#maven","title":"Maven","text":"<p>Add the Tileverse BOM to your <code>dependencyManagement</code>:</p> <pre><code>&lt;dependencyManagement&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n      &lt;artifactId&gt;tileverse-bom&lt;/artifactId&gt;\n      &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n      &lt;scope&gt;import&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <p>Then add the modules you need without specifying versions:</p> <pre><code>&lt;dependencies&gt;\n  &lt;!-- Range Reader with all providers --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-all&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- PMTiles support --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.pmtiles&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-pmtiles&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- Tile Matrix Set model --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.tilematrixset&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-tilematrixset&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- Vector Tiles --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.vectortiles&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-vectortiles&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"getting-started/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n    implementation platform('io.tileverse:tileverse-bom:1.1-SNAPSHOT')\n\n    implementation 'io.tileverse.rangereader:tileverse-rangereader-all'\n    implementation 'io.tileverse.pmtiles:tileverse-pmtiles'\n    implementation 'io.tileverse.tilematrixset:tileverse-tilematrixset'\n    implementation 'io.tileverse.vectortiles:tileverse-vectortiles'\n}\n</code></pre>"},{"location":"getting-started/#quick-examples","title":"Quick Examples","text":""},{"location":"getting-started/#reading-pmtiles-from-s3","title":"Reading PMTiles from S3","text":"<p>Combining Range Reader and PMTiles to access map tiles from cloud storage:</p> <pre><code>import io.tileverse.rangereader.s3.S3RangeReader;\nimport io.tileverse.pmtiles.PMTilesReader;\n\n// Create an S3 range reader with caching\nRangeReader rangeReader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/world.pmtiles\"))\n    .withCaching()\n    .build();\n\n// Read PMTiles using the range reader\ntry (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n    // Get tile at zoom 10, x=885, y=412\n    Optional&lt;byte[]&gt; tileData = reader.getTile(10, 885, 412);\n\n    if (tileData.isPresent()) {\n        System.out.printf(\"Tile size: %d bytes%n\", tileData.get().length);\n    }\n}\n</code></pre>"},{"location":"getting-started/#decoding-vector-tiles","title":"Decoding Vector Tiles","text":"<pre><code>import io.tileverse.vectortile.mvt.VectorTileCodec;\nimport io.tileverse.vectortile.model.VectorTile;\n\n// Decode MVT bytes\nVectorTileCodec codec = VectorTileCodec.getDefault();\nVectorTile tile = codec.decode(mvtBytes);\n\n// Access layers and features\nfor (VectorTile.Layer layer : tile.getLayers()) {\n    System.out.printf(\"Layer: %s (%d features)%n\",\n        layer.getName(), layer.getFeatures().size());\n\n    for (VectorTile.Layer.Feature feature : layer.getFeatures()) {\n        Geometry geometry = feature.getGeometry();\n        Map&lt;String, Object&gt; attributes = feature.getAttributes();\n        // Process feature...\n    }\n}\n</code></pre>"},{"location":"getting-started/#working-with-tile-matrix-sets","title":"Working with Tile Matrix Sets","text":"<pre><code>import io.tileverse.tiling.matrix.TileMatrixSet;\nimport io.tileverse.tiling.matrix.DefaultTileMatrixSets;\n\n// Use a standard tile matrix set\nTileMatrixSet webMercator = DefaultTileMatrixSets.WEB_MERCATOR_QUAD;\n\n// Get tile matrix for a zoom level\nTileMatrix matrix = webMercator.tileMatrix(10);\n\n// Calculate tile coordinates from geographic coordinates\nBoundingBox2D bbox = new BoundingBox2D(-122.4, 37.7, -122.3, 37.8);\nTileRange tiles = matrix.getTilesIntersecting(bbox);\n\nSystem.out.printf(\"Zoom %d covers tiles: %s%n\", 10, tiles);\n</code></pre>"},{"location":"getting-started/#module-relationships","title":"Module Relationships","text":"<p>Understanding how the modules work together:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Applications                      \u2502\n\u2502  (GeoServer, Custom Tile Servers, ETL Pipelines)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502             \u2502             \u2502             \u2502\n    \u25bc             \u25bc             \u25bc             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PMTiles \u2502  \u2502  Vector  \u2502  \u2502  Tile  \u2502  \u2502  Other   \u2502\n\u2502         \u2502  \u2502  Tiles   \u2502  \u2502Matrix  \u2502  \u2502 Formats  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502            \u2502             \u2502            \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n                       \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502 Range Reader   \u2502\n              \u2502  (Core Layer)  \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502             \u2502             \u2502            \u2502\n         \u25bc             \u25bc             \u25bc            \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  File  \u2502    \u2502  HTTP \u2502    \u2502   S3   \u2502   \u2502 ... \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>Range Reader provides the foundation for efficient byte-range access</li> <li>Tile Matrix Set defines coordinate systems and tiling schemes</li> <li>Vector Tiles handles MVT encoding/decoding</li> <li>PMTiles combines Range Reader with tile storage format</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic understanding, dive deeper into specific modules:</p> <ul> <li>Range Reader User Guide - Learn about data sources, caching, and authentication</li> <li>PMTiles User Guide - Read and write PMTiles archives</li> <li>Vector Tiles User Guide - Encode and decode MVT data</li> <li>Tile Matrix Set User Guide - Work with tile pyramids and coordinate systems</li> </ul>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Java 17+ (runtime)</li> <li>Java 21+ (development - recommended)</li> <li>Maven 3.9+ or Gradle 7.0+ for building</li> </ul>"},{"location":"getting-started/#community","title":"Community","text":"<ul> <li>GitHub: https://github.com/tileverse-io/tileverse</li> <li>Issues: https://github.com/tileverse-io/tileverse/issues</li> <li>Discussions: https://github.com/tileverse-io/tileverse/discussions</li> </ul>"},{"location":"architecture/","title":"Tileverse Architecture","text":"<p>Understand how the Tileverse modules fit together.</p>"},{"location":"architecture/#module-overview","title":"Module Overview","text":"<p>Tileverse is composed of four main modules:</p> <ol> <li>Range Reader: Foundation for byte-range data access</li> <li>Tile Matrix Set: Coordinate systems and tiling schemes</li> <li>Vector Tiles: MVT encoding/decoding</li> <li>PMTiles: Tile archive format</li> </ol>"},{"location":"architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Applications                      \u2502\n\u2502  (GeoServer, Custom Tile Servers, ETL Pipelines)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502             \u2502             \u2502             \u2502\n    \u25bc             \u25bc             \u25bc             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PMTiles \u2502  \u2502  Vector  \u2502  \u2502  Tile  \u2502  \u2502  Other   \u2502\n\u2502         \u2502  \u2502  Tiles   \u2502  \u2502Matrix  \u2502  \u2502 Formats  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502            \u2502             \u2502            \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n                       \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502 Range Reader   \u2502\n              \u2502  (Core Layer)  \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502             \u2502             \u2502            \u2502\n         \u25bc             \u25bc             \u25bc            \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  File  \u2502    \u2502  HTTP \u2502    \u2502   S3   \u2502   \u2502 ... \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<ol> <li>Modularity: Each library can be used independently</li> <li>Composability: Libraries work together seamlessly</li> <li>Cloud-native: Designed for cloud storage from the ground up</li> <li>Performance: Optimized for high-throughput server applications</li> <li>Standards-based: Implements established specifications</li> </ol>"},{"location":"architecture/#module-dependencies","title":"Module Dependencies","text":"<ul> <li>PMTiles depends on Range Reader, Tile Matrix Set, and Vector Tiles</li> <li>Vector Tiles is independent</li> <li>Tile Matrix Set is independent</li> <li>Range Reader is the foundation</li> </ul>"},{"location":"architecture/#next-steps","title":"Next Steps","text":"<ul> <li>System Design</li> <li>Module Dependencies</li> </ul>"},{"location":"architecture/dependencies/","title":"Module Dependencies","text":"<p>Coming Soon</p> <p>Detailed architecture documentation is under development.</p>"},{"location":"architecture/system-design/","title":"System Design","text":"<p>Coming Soon</p> <p>Detailed architecture documentation is under development.</p>"},{"location":"pmtiles/","title":"Tileverse PMTiles","text":"<p>A Java library for reading and writing PMTiles - a cloud-optimized format for map tiles.</p>"},{"location":"pmtiles/#overview","title":"Overview","text":"<p>Tileverse PMTiles is a Java implementation of the PMTiles format that provides efficient reading and writing capabilities for PMTiles archives. Built on top of Tileverse Range Reader, it supports both local files and cloud storage sources (S3, Azure Blob Storage, Google Cloud Storage, HTTP).</p>"},{"location":"pmtiles/#what-is-pmtiles","title":"What is PMTiles?","text":"<p>PMTiles is a single-file archive format for tiled data. A .pmtiles file can contain millions of tiles compressed and organized for efficient, random access. It's designed to be hosted on commodity storage and served directly over HTTP with range requests, without needing a specialized tile server.</p> <p>Key characteristics:</p> <ul> <li>Cloud-optimized: Designed for HTTP range requests</li> <li>Single-file: No complex directory structures</li> <li>Efficient indexing: Hilbert curve spatial indexing for fast tile lookup</li> <li>Flexible: Supports both raster and vector tiles</li> <li>Open format: Specification-driven, multiple implementations</li> </ul>"},{"location":"pmtiles/#features","title":"Features","text":"<ul> <li>Read PMTiles v3 files from local storage or cloud sources</li> <li>Write PMTiles v3 files with efficient spatial indexing</li> <li>Cloud-optimized access via HTTP range requests</li> <li>High-performance tile retrieval using Hilbert curves</li> <li>Multi-source support through tileverse-rangereader integration</li> <li>Thread-safe operations for concurrent access</li> <li>Memory-efficient streaming for large datasets</li> </ul>"},{"location":"pmtiles/#quick-start","title":"Quick Start","text":""},{"location":"pmtiles/#reading-tiles","title":"Reading Tiles","text":"<pre><code>import io.tileverse.pmtiles.PMTilesReader;\nimport io.tileverse.rangereader.file.FileRangeReader;\n\n// Create a range reader for the local file\nRangeReader rangeReader = FileRangeReader.builder()\n    .path(Path.of(\"mymap.pmtiles\"))\n    .build();\n\n// Read PMTiles using the range reader\ntry (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n    // Get metadata\n    PMTilesHeader header = reader.getHeader();\n    System.out.println(\"Tile type: \" + header.tileType());\n\n    // Read a specific tile\n    Optional&lt;byte[]&gt; tileData = reader.getTile(10, 885, 412);\n\n    if (tileData.isPresent()) {\n        System.out.printf(\"Tile size: %d bytes%n\", tileData.get().length);\n    }\n}\n</code></pre>"},{"location":"pmtiles/#reading-from-cloud-storage","title":"Reading from Cloud Storage","text":"<pre><code>import io.tileverse.rangereader.s3.S3RangeReader;\nimport io.tileverse.rangereader.cache.CachingRangeReader;\n\n// Create an S3 range reader with caching\nRangeReader s3Reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/tiles.pmtiles\"))\n    .region(Region.US_WEST_2)\n    .build();\n\nRangeReader cachedReader = CachingRangeReader.builder(s3Reader)\n    .maximumSize(1000)  // Cache up to 1000 ranges\n    .withBlockAlignment()  // Optimize for block-aligned reads\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(cachedReader)) {\n    // Access tiles efficiently from cloud storage\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/#use-cases","title":"Use Cases","text":"<ul> <li>Static tile serving: Host PMTiles on S3/Azure/GCS, serve directly with CloudFront/CDN</li> <li>Offline maps: Bundle large map datasets in a single portable file</li> <li>Tile generation pipelines: Convert tilesets to PMTiles format</li> <li>GeoServer integration: Serve PMTiles through GeoServer plugins</li> <li>Data analysis: Random access to historical tile data</li> </ul>"},{"location":"pmtiles/#performance","title":"Performance","text":"<p>Tileverse PMTiles is designed for high-performance access:</p> <ul> <li>Efficient spatial indexing using Hilbert curves for O(log n) tile lookup</li> <li>Multi-level caching through tileverse-rangereader integration</li> <li>Block-aligned reads to minimize cloud storage requests</li> <li>Memory-efficient streaming for processing large tile sets</li> <li>Thread-safe concurrent access for server applications</li> </ul>"},{"location":"pmtiles/#getting-started","title":"Getting Started","text":"<ul> <li> <p> User Guide</p> <p>Learn how to read and write PMTiles archives.</p> <p> User Guide</p> </li> <li> <p> Format Specification</p> <p>Understand the PMTiles v3 format.</p> <p> Specification</p> </li> </ul>"},{"location":"pmtiles/#related-modules","title":"Related Modules","text":"<p>This library works together with other Tileverse modules:</p> <ul> <li>Range Reader: Provides the underlying data access layer</li> <li>Vector Tiles: For decoding vector tile content</li> <li>Tile Matrix Set: For working with tile coordinates</li> </ul>"},{"location":"pmtiles/#requirements","title":"Requirements","text":"<ul> <li>Java 17+: Minimum runtime version</li> <li>Range Reader: Core dependency for data access</li> <li>Maven/Gradle: For dependency management</li> </ul>"},{"location":"pmtiles/#license","title":"License","text":"<p>Licensed under the Apache License, Version 2.0.</p>"},{"location":"pmtiles/user-guide/","title":"PMTiles User Guide","text":"<p>Welcome to the Tileverse PMTiles User Guide. This guide will help you understand and use the PMTiles library effectively.</p>"},{"location":"pmtiles/user-guide/#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers:</p> <ul> <li>Quick Start: Get up and running quickly</li> <li>Reading PMTiles: Read tiles from PMTiles archives</li> <li>Writing PMTiles: Create new PMTiles archives</li> <li>Cloud Storage: Work with PMTiles in S3, Azure, and GCS</li> </ul>"},{"location":"pmtiles/user-guide/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Java 17 or newer installed</li> <li>Basic familiarity with Maven or Gradle</li> <li>Understanding of tile-based mapping concepts</li> </ul>"},{"location":"pmtiles/user-guide/#installation","title":"Installation","text":"<p>Add the PMTiles dependency to your project:</p> MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.pmtiles&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-pmtiles&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Also add a Range Reader provider --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-all&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>dependencies {\n    implementation 'io.tileverse.pmtiles:tileverse-pmtiles:1.1-SNAPSHOT'\n    implementation 'io.tileverse.rangereader:tileverse-rangereader-all:1.1-SNAPSHOT'\n}\n</code></pre>"},{"location":"pmtiles/user-guide/#core-concepts","title":"Core Concepts","text":""},{"location":"pmtiles/user-guide/#pmtiles-structure","title":"PMTiles Structure","text":"<p>A PMTiles archive contains:</p> <ol> <li>Header: Metadata about the tileset (bounds, zoom levels, tile format)</li> <li>Directory: Spatial index using Hilbert curves</li> <li>Tiles: Compressed tile data</li> </ol>"},{"location":"pmtiles/user-guide/#tile-addressing","title":"Tile Addressing","text":"<p>Tiles are addressed using the standard XYZ scheme:</p> <ul> <li>z: Zoom level (0 = world view, higher = more detailed)</li> <li>x: Column number (west to east)</li> <li>y: Row number (north to south in TMS, south to north in XYZ)</li> </ul>"},{"location":"pmtiles/user-guide/#data-sources","title":"Data Sources","text":"<p>PMTiles can be read from any source supported by Range Reader:</p> <ul> <li>Local files</li> <li>HTTP/HTTPS servers</li> <li>Amazon S3</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"pmtiles/user-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start: Begin with a simple example</li> <li>Reading PMTiles: Learn about reading tiles</li> <li>Cloud Storage: Access PMTiles from the cloud</li> </ul>"},{"location":"pmtiles/user-guide/cloud-storage/","title":"Cloud Storage Integration","text":"<p>Learn how to efficiently access PMTiles from cloud storage providers.</p>"},{"location":"pmtiles/user-guide/cloud-storage/#overview","title":"Overview","text":"<p>PMTiles is designed to work efficiently with cloud object storage. By using HTTP range requests, you can serve tiles directly from S3, Azure Blob Storage, or Google Cloud Storage without a specialized tile server.</p>"},{"location":"pmtiles/user-guide/cloud-storage/#amazon-s3","title":"Amazon S3","text":""},{"location":"pmtiles/user-guide/cloud-storage/#basic-s3-access","title":"Basic S3 Access","text":"<pre><code>import io.tileverse.rangereader.s3.S3RangeReader;\nimport software.amazon.awssdk.regions.Region;\n\nRangeReader s3Reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/world.pmtiles\"))\n    .region(Region.US_WEST_2)\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(s3Reader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#with-caching","title":"With Caching","text":"<pre><code>import io.tileverse.rangereader.cache.CachingRangeReader;\n\nRangeReader cachedReader = CachingRangeReader.builder(s3Reader)\n    .maximumSize(1000)\n    .withBlockAlignment()\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(cachedReader)) {\n    // Cached reads\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#azure-blob-storage","title":"Azure Blob Storage","text":"<pre><code>import io.tileverse.rangereader.azure.AzureBlobRangeReader;\n\nRangeReader azureReader = AzureBlobRangeReader.builder()\n    .connectionString(connectionString)\n    .containerName(\"tiles\")\n    .blobPath(\"world.pmtiles\")\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(azureReader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#google-cloud-storage","title":"Google Cloud Storage","text":"<pre><code>import io.tileverse.rangereader.gcs.GoogleCloudStorageRangeReader;\n\nRangeReader gcsReader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://my-bucket/world.pmtiles\"))\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(gcsReader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"pmtiles/user-guide/cloud-storage/#multi-level-caching","title":"Multi-Level Caching","text":"<p>Combine memory and disk caching for optimal performance:</p> <pre><code>// Disk cache\nRangeReader diskCached = DiskCachingRangeReader.builder(s3Reader)\n    .cacheDirectory(Path.of(\"/tmp/tile-cache\"))\n    .maximumCacheSize(10_000_000_000L)  // 10 GB\n    .build();\n\n// Memory cache on top\nRangeReader memoryCached = CachingRangeReader.builder(diskCached)\n    .maximumSize(1000)\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(memoryCached)) {\n    // Optimized access\n}\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#block-alignment","title":"Block Alignment","text":"<p>Use block-aligned reads to minimize cloud storage requests:</p> <pre><code>RangeReader alignedReader = BlockAlignedRangeReader.builder(s3Reader)\n    .blockSize(65536)  // 64 KB blocks\n    .build();\n</code></pre>"},{"location":"pmtiles/user-guide/cloud-storage/#cost-optimization","title":"Cost Optimization","text":"<ol> <li>Enable caching to reduce request counts</li> <li>Use CDN in front of object storage</li> <li>Choose appropriate storage class (Standard vs. Infrequent Access)</li> <li>Monitor request patterns and adjust caching strategy</li> </ol>"},{"location":"pmtiles/user-guide/cloud-storage/#see-also","title":"See Also","text":"<ul> <li>Range Reader Authentication</li> <li>Range Reader Performance</li> </ul>"},{"location":"pmtiles/user-guide/quick-start/","title":"PMTiles Quick Start","text":"<p>Get started with Tileverse PMTiles in under 5 minutes.</p>"},{"location":"pmtiles/user-guide/quick-start/#installation","title":"Installation","text":"<p>First, add the dependencies:</p> MavenGradle <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.pmtiles&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-pmtiles&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-all&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <pre><code>dependencies {\n    implementation 'io.tileverse.pmtiles:tileverse-pmtiles:1.1-SNAPSHOT'\n    implementation 'io.tileverse.rangereader:tileverse-rangereader-all:1.1-SNAPSHOT'\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#reading-tiles-from-a-local-file","title":"Reading Tiles from a Local File","text":"<pre><code>import io.tileverse.pmtiles.PMTilesReader;\nimport io.tileverse.pmtiles.PMTilesHeader;\nimport io.tileverse.rangereader.RangeReader;\nimport io.tileverse.rangereader.file.FileRangeReader;\nimport java.nio.file.Path;\nimport java.util.Optional;\n\npublic class QuickStart {\n    public static void main(String[] args) throws Exception {\n        // Create a range reader for the PMTiles file\n        RangeReader rangeReader = FileRangeReader.builder()\n            .path(Path.of(\"world.pmtiles\"))\n            .build();\n\n        // Open the PMTiles archive\n        try (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n            // Read the header to get metadata\n            PMTilesHeader header = reader.getHeader();\n            System.out.println(\"Tile Format: \" + header.tileType());\n            System.out.println(\"Min Zoom: \" + header.minZoom());\n            System.out.println(\"Max Zoom: \" + header.maxZoom());\n\n            // Get a specific tile (zoom=10, x=885, y=412)\n            Optional&lt;byte[]&gt; tileData = reader.getTile(10, 885, 412);\n\n            if (tileData.isPresent()) {\n                System.out.printf(\"Tile found! Size: %d bytes%n\",\n                    tileData.get().length);\n            } else {\n                System.out.println(\"Tile not found\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#reading-from-http","title":"Reading from HTTP","text":"<pre><code>import io.tileverse.rangereader.http.HttpRangeReader;\n\n// Create HTTP range reader\nRangeReader httpReader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://example.com/tiles.pmtiles\"))\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(httpReader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n    // Process tile...\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#reading-from-s3","title":"Reading from S3","text":"<pre><code>import io.tileverse.rangereader.s3.S3RangeReader;\nimport software.amazon.awssdk.regions.Region;\n\n// Create S3 range reader\nRangeReader s3Reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/world.pmtiles\"))\n    .region(Region.US_WEST_2)\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(s3Reader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n    // Process tile...\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#with-caching","title":"With Caching","text":"<p>For better performance, especially with cloud storage, add caching:</p> <pre><code>import io.tileverse.rangereader.cache.CachingRangeReader;\n\n// Wrap the base reader with caching\nRangeReader cachedReader = CachingRangeReader.builder(s3Reader)\n    .maximumSize(1000)  // Cache up to 1000 ranges\n    .withBlockAlignment()  // Optimize reads\n    .build();\n\ntry (PMTilesReader reader = new PMTilesReader(cachedReader)) {\n    // Subsequent reads will be cached\n    Optional&lt;byte[]&gt; tile = reader.getTile(10, 885, 412);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#processing-multiple-tiles","title":"Processing Multiple Tiles","text":"<pre><code>// Get tiles for a specific area\nint zoom = 10;\nint minX = 880, maxX = 890;\nint minY = 410, maxY = 420;\n\ntry (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n    for (int x = minX; x &lt;= maxX; x++) {\n        for (int y = minY; y &lt;= maxY; y++) {\n            Optional&lt;byte[]&gt; tile = reader.getTile(zoom, x, y);\n            if (tile.isPresent()) {\n                System.out.printf(\"Tile %d/%d/%d: %d bytes%n\",\n                    zoom, x, y, tile.get().length);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pmtiles/user-guide/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Reading PMTiles: Learn more about reading operations</li> <li>Writing PMTiles: Create your own PMTiles archives</li> <li>Cloud Storage: Deep dive into cloud storage integration</li> <li>Range Reader Guide: Understand the underlying data access layer</li> </ul>"},{"location":"pmtiles/user-guide/reading/","title":"Reading PMTiles","text":"<p>This guide covers advanced topics for reading PMTiles archives.</p>"},{"location":"pmtiles/user-guide/reading/#opening-pmtiles-archives","title":"Opening PMTiles Archives","text":"<p>PMTiles archives can be opened from any data source supported by Range Reader:</p> <pre><code>// Local file\nRangeReader fileReader = FileRangeReader.builder()\n    .path(Path.of(\"tiles.pmtiles\"))\n    .build();\n\n// HTTP\nRangeReader httpReader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://example.com/tiles.pmtiles\"))\n    .build();\n\n// S3\nRangeReader s3Reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/tiles.pmtiles\"))\n    .build();\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#reading-header-information","title":"Reading Header Information","text":"<p>The header contains essential metadata about the tileset:</p> <pre><code>try (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n    PMTilesHeader header = reader.getHeader();\n\n    // Tile format (MVT, PNG, JPEG, WEBP, etc.)\n    String tileType = header.tileType();\n\n    // Zoom level range\n    int minZoom = header.minZoom();\n    int maxZoom = header.maxZoom();\n\n    // Geographic bounds (in E7 format: degrees * 10,000,000)\n    double minLon = header.minLonE7() / 10_000_000.0;\n    double minLat = header.minLatE7() / 10_000_000.0;\n    double maxLon = header.maxLonE7() / 10_000_000.0;\n    double maxLat = header.maxLatE7() / 10_000_000.0;\n\n    System.out.printf(\"Bounds: [%.6f, %.6f, %.6f, %.6f]%n\",\n        minLon, minLat, maxLon, maxLat);\n}\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#reading-individual-tiles","title":"Reading Individual Tiles","text":"<p>Tiles are retrieved using the standard Z/X/Y addressing:</p> <pre><code>Optional&lt;byte[]&gt; tileData = reader.getTile(zoom, x, y);\n\nif (tileData.isPresent()) {\n    byte[] tile = tileData.get();\n    // Process tile data...\n} else {\n    // Tile doesn't exist in the archive\n}\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#bulk-tile-operations","title":"Bulk Tile Operations","text":""},{"location":"pmtiles/user-guide/reading/#reading-a-tile-range","title":"Reading a Tile Range","text":"<pre><code>int zoom = 10;\nfor (int x = 880; x &lt;= 890; x++) {\n    for (int y = 410; y &lt;= 420; y++) {\n        Optional&lt;byte[]&gt; tile = reader.getTile(zoom, x, y);\n        if (tile.isPresent()) {\n            processTile(zoom, x, y, tile.get());\n        }\n    }\n}\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#parallel-processing","title":"Parallel Processing","text":"<p>PMTilesReader is thread-safe for read operations:</p> <pre><code>IntStream.range(880, 891)\n    .parallel()\n    .forEach(x -&gt; {\n        IntStream.range(410, 421).forEach(y -&gt; {\n            reader.getTile(zoom, x, y).ifPresent(tile -&gt; {\n                processTile(zoom, x, y, tile);\n            });\n        });\n    });\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use caching for cloud storage sources</li> <li>Enable block alignment for optimal read patterns</li> <li>Reuse readers instead of creating new instances</li> <li>Batch operations when processing multiple tiles</li> </ol> <p>See Cloud Storage for detailed performance optimization strategies.</p>"},{"location":"pmtiles/user-guide/reading/#error-handling","title":"Error Handling","text":"<pre><code>try (PMTilesReader reader = new PMTilesReader(rangeReader)) {\n    Optional&lt;byte[]&gt; tile = reader.getTile(zoom, x, y);\n    // Process tile...\n} catch (UncheckedIOException e) {\n    // Handle I/O errors (network issues, file not found, etc.)\n    System.err.println(\"Failed to read PMTiles: \" + e.getMessage());\n} catch (Exception e) {\n    // Handle other errors (invalid format, etc.)\n    System.err.println(\"Error: \" + e.getMessage());\n}\n</code></pre>"},{"location":"pmtiles/user-guide/reading/#next-steps","title":"Next Steps","text":"<ul> <li>Writing PMTiles: Create your own PMTiles archives</li> <li>Cloud Storage: Optimize for cloud storage</li> </ul>"},{"location":"pmtiles/user-guide/writing/","title":"Writing PMTiles","text":"<p>This guide covers creating PMTiles archives.</p> <p>Coming Soon</p> <p>Detailed documentation for PMTiles writing is under development. For now, refer to the JavaDoc API documentation and code examples in the source repository.</p>"},{"location":"pmtiles/user-guide/writing/#basic-writing-example","title":"Basic Writing Example","text":"<pre><code>import io.tileverse.pmtiles.PMTilesWriter;\nimport java.nio.file.Path;\n\n// Create a new PMTiles archive\nPMTilesWriter writer = PMTilesWriter.create(Path.of(\"output.pmtiles\"))\n    .tileType(\"mvt\")  // Vector tiles\n    .minZoom(0)\n    .maxZoom(14)\n    .build();\n\n// Add tiles\nwriter.addTile(10, 885, 412, tileData);\n\n// Close when done\nwriter.close();\n</code></pre>"},{"location":"pmtiles/user-guide/writing/#tile-format","title":"Tile Format","text":"<p>PMTiles supports multiple tile formats:</p> <ul> <li>MVT: Mapbox Vector Tiles (Protocol Buffers)</li> <li>PNG: Raster images with transparency</li> <li>JPEG: Raster images</li> <li>WEBP: Modern image format</li> </ul>"},{"location":"pmtiles/user-guide/writing/#best-practices","title":"Best Practices","text":"<ol> <li>Write tiles in Hilbert order for optimal spatial locality</li> <li>Set appropriate compression for your tile type</li> <li>Include metadata in the header (attribution, description, etc.)</li> <li>Validate tiles before adding to archive</li> </ol>"},{"location":"pmtiles/user-guide/writing/#see-also","title":"See Also","text":"<ul> <li>Reading PMTiles</li> <li>PMTiles Specification</li> </ul>"},{"location":"rangereader/","title":"Tileverse Range Reader","text":"<p>A high-performance Java library for reading byte ranges from various data sources including local files, HTTP servers, and cloud storage services.</p>"},{"location":"rangereader/#the-cloud-native-geospatial-challenge","title":"The Cloud-Native Geospatial Challenge","text":"<p>The geospatial data landscape has fundamentally shifted from traditional \"download-and-process\" workflows to cloud-native patterns. Modern formats like Cloud Optimized GeoTIFF (COG), PMTiles, GeoParquet, Zarr, and FlatGeobuf are explicitly designed to leverage HTTP range requests, allowing applications to fetch only the specific byte ranges needed for a query rather than downloading entire multi-gigabyte files.</p> <p>However, the Java ecosystem has suffered from significant fragmentation in this space. Tileverse Range Reader provides the missing architectural layer that the Java geospatial ecosystem needs\u2014a lightweight, extensible, and cloud-agnostic abstraction for range-based I/O operations.</p>"},{"location":"rangereader/#key-features","title":"Key Features","text":"<ul> <li>Multiple Data Sources: Local files, HTTP/HTTPS, Amazon S3, Azure Blob Storage, and Google Cloud Storage.</li> <li>High Performance: Multi-level caching, block alignment, and concurrent access.</li> <li>Flexible Architecture: Composable functionality through decorators and builder APIs.</li> <li>Comprehensive Authentication: Support for a wide range of authentication mechanisms.</li> </ul>"},{"location":"rangereader/#getting-started","title":"Getting Started","text":"<p>Choose your path based on your role:</p> <ul> <li> <p> User Guide</p> <p>Learn how to use the library in your applications.</p> <p> Get Started</p> </li> <li> <p> Developer Guide</p> <p>Contribute to the project or understand the internals.</p> <p> Development</p> </li> </ul>"},{"location":"rangereader/#requirements","title":"Requirements","text":"<ul> <li>Java 17+: Minimum Java version required</li> <li>Maven 3.9+: For building from source</li> <li>Docker: For running benchmarks and integration tests</li> </ul>"},{"location":"rangereader/#license","title":"License","text":"<p>Licensed under the Apache License, Version 2.0.</p>"},{"location":"rangereader/developer-guide/","title":"Developer Guide","text":"<p>Welcome to the Developer Guide for the Tileverse Range Reader. This guide is for developers who want to contribute to the project, understand its internal architecture, or extend its functionality.</p>"},{"location":"rangereader/developer-guide/#what-youll-find","title":"What You'll Find","text":"<p>This guide provides comprehensive information for project contributors and maintainers:</p> <ul> <li>Architecture: A deep dive into the design patterns, module structure, and core principles of the library.</li> <li>Building: Instructions on how to build the project from source, including prerequisites and build commands.</li> <li>Testing: An overview of the testing strategy, including unit, integration, and performance tests.</li> <li>Performance: Guidance on benchmarking, profiling, and optimizing the library.</li> <li>Contributing: Guidelines for contributing code, documentation, and bug reports.</li> </ul>"},{"location":"rangereader/developer-guide/#prerequisites","title":"Prerequisites","text":"<p>Before you start, ensure you have the following installed:</p> <ul> <li>Java 21+ (for development)</li> <li>Maven 3.9+</li> <li>Docker (for integration tests)</li> <li>Git</li> </ul>"},{"location":"rangereader/developer-guide/architecture/","title":"Architecture","text":"<p>This document provides a deep dive into the design patterns, architectural decisions, and technical implementation of the Tileverse Range Reader library.</p>"},{"location":"rangereader/developer-guide/architecture/#the-architectural-gap-we-fill","title":"The Architectural Gap We Fill","text":""},{"location":"rangereader/developer-guide/architecture/#the-fragmented-state-of-java-geospatial-io","title":"The Fragmented State of Java Geospatial I/O","text":"<p>The Java geospatial ecosystem has suffered from a critical architectural gap: the lack of a unified, lightweight abstraction for remote range-based I/O. This has led to repeated, incompatible solutions across the ecosystem:</p> Library Custom I/O Abstraction Cloud Support Reusability imageio-ext <code>RangeReader</code> SPI HTTP, S3, GCS, Azure Internal only netCDF-Java <code>cdms3://</code> protocol S3-compatible Internal only simonpoole/pmtiles-reader <code>FileChannel</code> wrapper User-implemented Requires custom code Apache Parquet <code>SeekableInputStream</code> User-implemented Complex to implement <p>Each library has essentially re-invented the same wheel, creating: - Code duplication across the ecosystem - Inconsistent APIs for similar operations - High barriers to entry for new format libraries - Vendor lock-in to specific cloud providers</p>"},{"location":"rangereader/developer-guide/architecture/#our-solution-the-missing-middle-layer","title":"Our Solution: The Missing Middle Layer","text":"<p>Tileverse Range Reader provides the unified abstraction layer that the Java ecosystem has been missing\u2014comparable to Python's fsspec library. We enable:</p> <pre><code>// One interface, any backend\nRangeReader reader = createReader(uri);  // Works with s3://, https://, file://\nByteBuffer data = reader.readRange(offset, length);  // Same operation everywhere\n</code></pre> <p>This architectural foundation allows format libraries to focus on parsing logic instead of I/O plumbing.</p> <p></p>"},{"location":"rangereader/developer-guide/architecture/#module-architecture","title":"Module Architecture","text":"<p>The Tileverse Range Reader library follows a modular architecture that enables incremental adoption and minimal dependency footprint. Each module serves a specific purpose and can be used independently or in combination with others.</p> <p></p>"},{"location":"rangereader/developer-guide/architecture/#module-dependencies","title":"Module Dependencies","text":"<pre><code>graph TD\n    A[all] --&gt; B[core]\n    A --&gt; C[s3]\n    A --&gt; D[azure]\n    A --&gt; E[gcs]\n    C --&gt; B\n    D --&gt; B\n    E --&gt; B\n    F[benchmarks] --&gt; A</code></pre>"},{"location":"rangereader/developer-guide/architecture/#core-module-tileverse-rangereader-core","title":"Core Module (<code>tileverse-rangereader-core</code>)","text":"<p>Purpose: Provides fundamental abstractions, base implementations, and decorators.</p> <p>Key Responsibilities: - Core <code>RangeReader</code> interface definition - Abstract base classes with common functionality - Local file system implementation (<code>FileRangeReader</code>) - HTTP/HTTPS implementation (<code>HttpRangeReader</code>) - Performance decorators (caching, disk caching) - Authentication framework for HTTP sources</p>"},{"location":"rangereader/developer-guide/architecture/#cloud-provider-modules-s3-azure-gcs","title":"Cloud Provider Modules (<code>s3</code>, <code>azure</code>, <code>gcs</code>)","text":"<p>Purpose: Provider-specific implementations for AWS, Azure, and Google Cloud.</p> <p>Key Features: - Native SDK integration - Full credential chain support - Provider-specific optimizations</p>"},{"location":"rangereader/developer-guide/architecture/#all-module-tileverse-rangereader-all","title":"All Module (<code>tileverse-rangereader-all</code>)","text":"<p>Purpose: Convenience aggregation module that provides unified access to all functionality.</p>"},{"location":"rangereader/developer-guide/architecture/#component-view","title":"Component View","text":""},{"location":"rangereader/developer-guide/architecture/#component-responsibilities","title":"Component Responsibilities","text":"Component Responsibility RangeReader Define the contract for reading byte ranges RangeReaderProvider Service Provider Interface for discovering and creating RangeReader instances RangeReaderFactory Discovers and selects the appropriate RangeReaderProvider to create RangeReader instances AbstractRangeReader Provide common functionality and validation FileRangeReader Read ranges from local files using NIO HttpRangeReader Read ranges from HTTP servers with authentication S3RangeReader Read ranges from Amazon S3 and S3-compatible storage AzureBlobRangeReader Read ranges from Azure Blob Storage GoogleCloudStorageRangeReader Read ranges from Google Cloud Storage CachingRangeReader Provide in-memory caching with configurable policies DiskCachingRangeReader Provide persistent disk-based caching"},{"location":"rangereader/developer-guide/architecture/#core-design-patterns","title":"Core Design Patterns","text":"<p>The library is built on proven architectural patterns that provide flexibility, performance, and maintainability.</p>"},{"location":"rangereader/developer-guide/architecture/#decorator-pattern","title":"Decorator Pattern","text":"<p>The primary architectural pattern enabling composable functionality:</p> <pre><code>// \u2705 CORRECT: Proper decorator stacking order\nRangeReader reader = \n    CachingRangeReader.builder(             // \u2190 Outermost: memory caching\n        DiskCachingRangeReader.builder(     // \u2190 Persistent caching\n            S3RangeReader.builder()         // \u2190 Base implementation\n                .uri(uri)\n                .build())\n            .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB disk cache\n            .build())\n        .maximumSize(1000)                  // 1000 entries in memory\n        .build();\n</code></pre>"},{"location":"rangereader/developer-guide/architecture/#template-method-pattern","title":"Template Method Pattern","text":"<p><code>AbstractRangeReader</code> implements the Template Method pattern for consistent behavior:</p> <pre><code>public abstract class AbstractRangeReader implements RangeReader {\n\n    // Template method - final to prevent override\n    @Override\n    public final int readRange(long offset, int length, ByteBuffer target) {\n        // 1. Parameter validation (consistent across all implementations)\n        validateParameters(offset, length, target);\n\n        // 2. Boundary checking (handles EOF scenarios)\n        int actualLength = calculateActualLength(offset, length);\n\n        // 3. Buffer preparation\n        int initialPosition = target.position();\n\n        // 4. Delegate to implementation (hook method)\n        int bytesRead = readRangeNoFlip(offset, actualLength, target);\n\n        // 5. Buffer post-processing (flip for consumption)\n        prepareBufferForReading(target, initialPosition);\n\n        return bytesRead;\n    }\n\n    // Hook method - implementations provide specific logic\n    protected abstract int readRangeNoFlip(long offset, int actualLength, ByteBuffer target);\n}\n</code></pre>"},{"location":"rangereader/developer-guide/architecture/#builder-pattern","title":"Builder Pattern","text":"<p>The library uses type-safe builders for configuration:</p> <pre><code>// Type-safe, fluent configuration\nS3RangeReader reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .region(Region.US_WEST_2)\n    .credentialsProvider(credentialsProvider)\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/architecture/#runtime-view","title":"Runtime View","text":"<p>The runtime view describes the dynamic behavior of the library.</p>"},{"location":"rangereader/developer-guide/architecture/#basic-file-range-reading","title":"Basic File Range Reading","text":""},{"location":"rangereader/developer-guide/architecture/#http-range-reading-with-authentication","title":"HTTP Range Reading with Authentication","text":""},{"location":"rangereader/developer-guide/architecture/#multi-level-caching-scenario","title":"Multi-Level Caching Scenario","text":""},{"location":"rangereader/developer-guide/architecture/#thread-safety-design","title":"Thread Safety Design","text":"<p>All <code>RangeReader</code> implementations MUST be thread-safe. This is achieved through: - Immutable State: Fields are final and set at construction. - Concurrent Collections: Using thread-safe caches like Caffeine. - Per-Operation Resources: Creating new resources (like HTTP connections) for each request.</p>"},{"location":"rangereader/developer-guide/architecture/#performance-architecture","title":"Performance Architecture","text":""},{"location":"rangereader/developer-guide/architecture/#multi-level-caching-strategy","title":"Multi-Level Caching Strategy","text":"<p><code>Request \u2192 Memory Cache \u2192 Disk Cache \u2192 Base Reader \u2192 Source</code></p> <ul> <li>L1 (Memory): Fastest access, limited capacity.</li> <li>L2 (Disk): Persistent, larger capacity.</li> <li>L3 (Network/Disk): Authoritative source.</li> </ul>"},{"location":"rangereader/developer-guide/architecture/#read-optimization","title":"Read Optimization","text":"<p>The library optimizes read patterns through intelligent caching strategies. Memory caching provides fast access to frequently used ranges, while disk caching offers persistence for large datasets across application sessions.</p>"},{"location":"rangereader/developer-guide/architecture/#error-handling-architecture","title":"Error Handling Architecture","text":"<p>A standard <code>IOException</code> hierarchy is used, with specific exceptions for cloud providers. Resilience patterns like graceful degradation (e.g., handling a deleted cache file) and retry logic with exponential backoff are implemented.</p>"},{"location":"rangereader/developer-guide/architecture/#extension-architecture","title":"Extension Architecture","text":"<p>New data sources can be added by extending <code>AbstractRangeReader</code> and implementing the builder pattern. New decorators can be created by implementing the <code>RangeReader</code> interface and delegating to a wrapped reader.</p>"},{"location":"rangereader/developer-guide/architecture/#service-provider-interface-spi","title":"Service Provider Interface (SPI)","text":"<p>The Tileverse Range Reader library leverages the Java Service Provider Interface (SPI) to enable flexible and extensible discovery of <code>RangeReader</code> implementations. Instead of directly instantiating <code>RangeReader</code> classes, the <code>RangeReaderFactory</code> uses the SPI to find and load available <code>RangeReaderProvider</code> implementations at runtime.</p> <p>Key Concepts:</p> <ul> <li> <p><code>RangeReaderProvider</code>: This interface defines the contract for a service provider. Each concrete implementation (e.g., <code>FileRangeReaderProvider</code>, <code>S3RangeReaderProvider</code>) is responsible for:</p> <ul> <li>Identifying itself with a unique ID.</li> <li>Declaring its availability (e.g., checking for necessary system properties or environment variables).</li> <li>Specifying the URI schemes and hostname patterns it can process.</li> <li>Providing a factory method to create a <code>RangeReader</code> instance based on a <code>RangeReaderConfig</code>.</li> <li>Optionally, defining configuration parameters specific to its implementation.</li> </ul> </li> <li> <p><code>RangeReaderFactory</code>: This factory class is the entry point for obtaining <code>RangeReader</code> instances. It performs the following steps:</p> <ol> <li>Discovery: Uses <code>java.util.ServiceLoader</code> to find all registered <code>RangeReaderProvider</code> implementations.</li> <li>Filtering: Filters the discovered providers based on their <code>canProcess(RangeReaderConfig)</code> method, which checks the URI scheme and other static criteria.</li> <li>Disambiguation: For ambiguous cases (e.g., multiple providers supporting HTTP/HTTPS), it employs a multi-step process:<ul> <li>Checks for explicit provider IDs in the <code>RangeReaderConfig</code>.</li> <li>Analyzes URI hostname patterns to identify cloud-specific endpoints (e.g., Azure Blob Storage, AWS S3).</li> <li>Performs a <code>HEAD</code> request to the resource to inspect provider-specific HTTP headers (e.g., <code>x-ms-request-id</code> for Azure, <code>x-amz-request-id</code> for S3).</li> <li>Resolves remaining ambiguities by selecting the provider with the highest priority (lowest <code>getOrder()</code> value).</li> </ul> </li> <li>Instantiation: Once a single best provider is identified, it delegates the creation of the <code>RangeReader</code> to that provider.</li> </ol> </li> </ul> <p>Adding a New Provider:</p> <p>To add support for a new data source or protocol, you need to:</p> <ol> <li>Implement the <code>RangeReaderProvider</code> interface.</li> <li>Create a <code>META-INF/services/io.tileverse.rangereader.spi.RangeReaderProvider</code> file in your JAR, listing the fully qualified name of your <code>RangeReaderProvider</code> implementation.</li> <li>Implement your specific <code>RangeReader</code> logic, typically by extending <code>AbstractRangeReader</code>.</li> </ol> <p>This SPI mechanism ensures that the core library remains lightweight and extensible, allowing developers to easily integrate new storage backends without modifying the core codebase.</p>"},{"location":"rangereader/developer-guide/architecture/#testing-architecture","title":"Testing Architecture","text":"<p>A base integration test class, <code>AbstractRangeReaderIT</code>, is used for all implementations. Testcontainers is used to run tests against real service APIs in Docker containers.</p>"},{"location":"rangereader/developer-guide/building/","title":"Building","text":"<p>Instructions for building the Tileverse Range Reader library from source, including compilation, packaging, code quality, and benchmarks.</p> <p>For comprehensive testing information, see the Testing Guide.</p>"},{"location":"rangereader/developer-guide/building/#prerequisites","title":"Prerequisites","text":""},{"location":"rangereader/developer-guide/building/#required-software","title":"Required Software","text":"<ul> <li>Java 21+: For development (Java 17+ for runtime)</li> <li>Maven 3.9+: Build tool and dependency management</li> <li>Git: Version control</li> </ul>"},{"location":"rangereader/developer-guide/building/#optional-tools","title":"Optional Tools","text":"<ul> <li>Docker: For running integration tests with TestContainers</li> <li>IDE: IntelliJ IDEA, Eclipse, or VS Code with Java extensions</li> </ul>"},{"location":"rangereader/developer-guide/building/#quick-start","title":"Quick Start","text":""},{"location":"rangereader/developer-guide/building/#clone-and-build","title":"Clone and Build","text":"<pre><code># Clone the repository\ngit clone https://github.com/tileverse-io/tileverse-rangereader.git\ncd tileverse-rangereader\n\n# Build all modules\n./mvnw clean compile\n\n# Run tests\n./mvnw test\n\n# Package JARs\n./mvnw package\n</code></pre>"},{"location":"rangereader/developer-guide/building/#using-the-makefile-recommended","title":"Using the Makefile (Recommended)","text":"<p>The project includes a comprehensive Makefile that wraps Maven commands for common development tasks:</p> <pre><code># Show all available targets\nmake help\n\n# Build everything (compile + test)\nmake\n\n# Individual build targets\nmake clean         # Clean all build artifacts\nmake compile       # Compile all modules\nmake package       # Build and create JARs\nmake install       # Install to local repository\n\n# Code quality\nmake format        # Format code (Spotless + SortPOM)\nmake lint          # Check code formatting\n\n# Testing\nmake test          # Run all tests (unit + integration)\nmake test-unit     # Run unit tests only\nmake test-it       # Run integration tests only\n\n# Module-specific testing\nmake test-core     # Core module unit tests\nmake test-s3       # S3 module unit tests  \nmake test-azure    # Azure module unit tests\nmake test-gcs      # GCS module unit tests\n\n# Module-specific integration tests\nmake test-core-it  # Core integration tests\nmake test-s3-it    # S3 integration tests\nmake test-azure-it # Azure integration tests\nmake test-gcs-it   # GCS integration tests\n\n# Benchmarks\nmake build-benchmarks # Build benchmark JAR\nmake benchmarks      # Run all benchmarks\nmake benchmarks-file # Run file-based benchmarks only\nmake benchmarks-gc   # Run benchmarks with GC profiling\n\n# Development workflow\nmake verify        # Full verification (lint + test)\nmake quick-build   # Fast build without tests\nmake dev-setup     # Setup development environment\n</code></pre>"},{"location":"rangereader/developer-guide/building/#build-targets","title":"Build Targets","text":""},{"location":"rangereader/developer-guide/building/#compilation","title":"Compilation","text":"<pre><code># Compile all modules\n./mvnw clean compile\n\n# Compile specific module\n./mvnw clean compile -pl src/core\n\n# Compile with dependencies\n./mvnw clean compile -pl src/s3 -am\n</code></pre>"},{"location":"rangereader/developer-guide/building/#testing","title":"Testing","text":"<p>For comprehensive testing information including unit tests, integration tests, TestContainers setup, and performance testing, see the Testing Guide.</p> <p>Quick testing commands:</p> <pre><code># Run all tests (recommended)\nmake test\n\n# Test categories\nmake test-unit     # Unit tests only\nmake test-it       # Integration tests only (requires Docker)\nmake perf-test     # Performance tests\n\n# Module-specific testing\nmake test-core     # Core module tests\nmake test-s3       # S3 module tests\nmake test-azure    # Azure module tests\nmake test-gcs      # GCS module tests\n\n# Direct Maven commands\n./mvnw test        # Unit tests\n./mvnw verify      # All tests (unit + integration)\n</code></pre>"},{"location":"rangereader/developer-guide/building/#packaging","title":"Packaging","text":"<pre><code># Create JAR files\n./mvnw package\n\n# Skip tests during packaging\n./mvnw package -DskipTests\n\n# Create JAR with dependencies (fat JAR)\n./mvnw package -Pshade\n</code></pre>"},{"location":"rangereader/developer-guide/building/#installation","title":"Installation","text":"<pre><code># Install to local Maven repository\n./mvnw install\n\n# Install without tests\n./mvnw install -DskipTests\n\n# Install specific module\n./mvnw install -pl src/core\n</code></pre>"},{"location":"rangereader/developer-guide/building/#code-quality","title":"Code Quality","text":""},{"location":"rangereader/developer-guide/building/#formatting","title":"Formatting","text":"<p>The project uses Spotless with Palantir Java Format:</p> <pre><code># Apply formatting (recommended)\nmake format\n\n# Check formatting without applying changes\nmake lint\n\n# Format only Java code\nmake format-java\n\n# Format only POM files\nmake format-pom\n\n# Direct Maven commands\n./mvnw spotless:apply  # Apply Java formatting\n./mvnw spotless:check  # Check Java formatting\n./mvnw sortpom:sort    # Sort POM files\n./mvnw sortpom:verify  # Check POM formatting\n</code></pre>"},{"location":"rangereader/developer-guide/building/#license-headers","title":"License Headers","text":"<p>All Java files must include the Apache 2.0 license header:</p> <pre><code># Check license headers\n./mvnw license:check\n\n# Add missing license headers\n./mvnw license:format\n</code></pre>"},{"location":"rangereader/developer-guide/building/#pom-organization","title":"POM Organization","text":"<p>The project uses SortPOM to maintain consistent POM structure:</p> <pre><code># Check POM formatting\n./mvnw sortpom:verify\n\n# Sort POM files\n./mvnw sortpom:sort\n</code></pre>"},{"location":"rangereader/developer-guide/building/#combined-quality-checks","title":"Combined Quality Checks","text":"<pre><code># Run all quality checks\n./mvnw validate\n\n# Using qa profile (check only, no changes)\n./mvnw -Pqa validate\n\n# Using Makefile\nmake lint\n</code></pre>"},{"location":"rangereader/developer-guide/building/#benchmarks","title":"Benchmarks","text":"<p>For comprehensive benchmarking information including JMH setup, performance analysis, and benchmark examples, see the Testing Guide.</p> <p>Quick benchmark commands:</p> <pre><code># Build and run benchmarks\nmake build-benchmarks  # Build benchmark JAR\nmake benchmarks        # Run all benchmarks\nmake benchmarks-gc     # Run with GC profiling\n\n# Direct execution\njava -jar benchmarks/target/benchmarks.jar\n</code></pre>"},{"location":"rangereader/developer-guide/building/#ide-configuration","title":"IDE Configuration","text":""},{"location":"rangereader/developer-guide/building/#intellij-idea","title":"IntelliJ IDEA","text":"<ol> <li>Import Project:</li> <li>File \u2192 Open \u2192 Select <code>pom.xml</code></li> <li> <p>Choose \"Open as Project\"</p> </li> <li> <p>Configure Code Style:</p> </li> <li>File \u2192 Settings \u2192 Editor \u2192 Code Style \u2192 Java</li> <li>Scheme \u2192 Import Scheme \u2192 Eclipse XML Profile</li> <li> <p>Import <code>palantir-java-format.xml</code> (available in Spotless plugin)</p> </li> <li> <p>Enable Annotation Processing:</p> </li> <li>File \u2192 Settings \u2192 Build \u2192 Compiler \u2192 Annotation Processors</li> <li> <p>Enable annotation processing</p> </li> <li> <p>Run Configurations:    <pre><code># Unit Tests\nWorking directory: $MODULE_WORKING_DIR$\nVM options: -ea\n\n# Integration Tests\nVM options: -ea -Dtestcontainers.reuse.enable=true\n</code></pre></p> </li> </ol>"},{"location":"rangereader/developer-guide/building/#eclipse","title":"Eclipse","text":"<ol> <li>Import Project:</li> <li>File \u2192 Import \u2192 Existing Maven Projects</li> <li> <p>Select the root directory</p> </li> <li> <p>Code Formatting:</p> </li> <li>Code formatting is automatically applied via the <code>spotless-maven-plugin</code> during Maven builds</li> <li>Run <code>make format</code> or <code>./mvnw spotless:apply</code> to format code</li> <li>The project uses Palantir Java Format (configured in the Maven POM)</li> <li>No additional Eclipse plugins are required</li> </ol>"},{"location":"rangereader/developer-guide/building/#vs-code","title":"VS Code","text":"<ol> <li>Install Extensions:</li> <li>Extension Pack for Java</li> <li> <p>Maven for Java (usually included in Extension Pack)</p> </li> <li> <p>Code Formatting:</p> </li> <li>Code formatting is automatically applied via the <code>spotless-maven-plugin</code> during Maven builds</li> <li>Run <code>make format</code> or <code>./mvnw spotless:apply</code> to format code</li> <li>The Maven integration will handle code formatting through the build process</li> <li> <p>For manual formatting in the editor, VS Code will use its built-in Java formatter</p> </li> <li> <p>Optional Settings (<code>.vscode/settings.json</code>):    <pre><code>{\n  \"java.configuration.updateBuildConfiguration\": \"automatic\",\n  \"java.test.config.vmargs\": [\"-ea\"]\n}\n</code></pre></p> </li> </ol>"},{"location":"rangereader/developer-guide/building/#module-structure","title":"Module Structure","text":"<p>The project follows a multi-module Maven structure with BOMs for dependency management:</p>"},{"location":"rangereader/developer-guide/building/#bom-modules","title":"BOM Modules","text":""},{"location":"rangereader/developer-guide/building/#dependencies-bom-dependencies","title":"Dependencies BOM (<code>dependencies/</code>)","text":"<pre><code># Build dependencies BOM\n./mvnw clean compile -pl dependencies\n\n# This module manages third-party dependency versions:\n# - AWS SDK components\n# - Azure Storage SDK components\n# - Google Cloud Storage SDK components\n# - Jackson, Caffeine, etc.\n</code></pre>"},{"location":"rangereader/developer-guide/building/#range-reader-bom-bom","title":"Range Reader BOM (<code>bom/</code>)","text":"<pre><code># Build Range Reader BOM\n./mvnw clean compile -pl bom\n\n# This module manages Range Reader module versions:\n# - tileverse-rangereader-core\n# - tileverse-rangereader-s3\n# - tileverse-rangereader-azure\n# - tileverse-rangereader-gcs\n# - tileverse-rangereader-all\n</code></pre>"},{"location":"rangereader/developer-guide/building/#core-module-srccore","title":"Core Module (<code>src/core</code>)","text":"<pre><code># Build core module\n./mvnw clean compile -pl src/core\n\n# Test core module\n./mvnw test -pl src/core\n\n# Core module structure\nsrc/core/\n\u251c\u2500\u2500 src/main/java/io/tileverse/rangereader/\n\u2502   \u251c\u2500\u2500 RangeReader.java\n\u2502   \u251c\u2500\u2500 AbstractRangeReader.java\n\u2502   \u251c\u2500\u2500 file/FileRangeReader.java\n\u2502   \u251c\u2500\u2500 http/HttpRangeReader.java\n\u2502   \u251c\u2500\u2500 cache/\n\u2502   \u2514\u2500\u2500 block/\n\u2514\u2500\u2500 src/test/java/\n</code></pre>"},{"location":"rangereader/developer-guide/building/#cloud-provider-modules","title":"Cloud Provider Modules","text":"<pre><code># Build S3 module\n./mvnw clean compile -pl src/s3 -am\n\n# Build Azure module\n./mvnw clean compile -pl src/azure -am\n\n# Build GCS module\n./mvnw clean compile -pl src/gcs -am\n</code></pre>"},{"location":"rangereader/developer-guide/building/#aggregation-module-srcall","title":"Aggregation Module (<code>src/all</code>)","text":"<pre><code># Build all module (includes all dependencies)\n./mvnw clean compile -pl src/all -am\n\n# This module provides:\n# - RangeReaderBuilder (unified builder)\n# - RangeReaderFactory\n</code></pre>"},{"location":"rangereader/developer-guide/building/#benchmarks-module","title":"Benchmarks Module","text":"<pre><code># Build benchmarks\n./mvnw clean compile -pl benchmarks -am\n\n# Requires all other modules\n</code></pre>"},{"location":"rangereader/developer-guide/building/#complete-module-build-order","title":"Complete Module Build Order","text":"<p>The modules have the following dependency hierarchy:</p> <pre><code>dependencies (BOM for third-party deps)\n\u251c\u2500\u2500 bom (BOM for Range Reader modules)  \n\u251c\u2500\u2500 src/core (core interfaces and implementations)\n\u251c\u2500\u2500 src/s3 (depends on core)\n\u251c\u2500\u2500 src/azure (depends on core)  \n\u251c\u2500\u2500 src/gcs (depends on core)\n\u251c\u2500\u2500 src/all (depends on all cloud provider modules)\n\u2514\u2500\u2500 benchmarks (depends on all modules)\n</code></pre>"},{"location":"rangereader/developer-guide/building/#ci-friendly-versioning","title":"CI-Friendly Versioning","text":"<p>The project uses Maven's CI-friendly versioning:</p> <pre><code># Build with custom version\n./mvnw clean package -Drevision=1.2.3\n\n# Build snapshot\n./mvnw clean package -Drevision=1.2.3-SNAPSHOT\n\n# The version is controlled by the revision property\n</code></pre>"},{"location":"rangereader/developer-guide/building/#docker-integration","title":"Docker Integration","text":"<p>Integration tests require Docker for TestContainers. For detailed TestContainers setup, container configurations, and troubleshooting, see the Testing Guide.</p> <pre><code># Ensure Docker is running\ndocker --version\n\n# Run integration tests\nmake test-it\n</code></pre>"},{"location":"rangereader/developer-guide/building/#troubleshooting-build-issues","title":"Troubleshooting Build Issues","text":""},{"location":"rangereader/developer-guide/building/#common-problems","title":"Common Problems","text":"<p>Maven not found: <pre><code># Use Maven wrapper\n./mvnw --version\n</code></pre></p> <p>Java version issues: <pre><code># Check Java version\njava -version\njavac -version\n\n# Set JAVA_HOME\nexport JAVA_HOME=/path/to/java21\n</code></pre></p> <p>Docker issues: <pre><code># Check Docker is running\ndocker ps\n\n# Pull required images manually\ndocker pull localstack/localstack:3.2.0\ndocker pull minio/minio:latest\n</code></pre></p> <p>Permission issues on scripts: <pre><code># Make scripts executable\nchmod +x mvnw\nchmod +x docs/structurizr/*.sh\n</code></pre></p> <p>Out of memory during build: <pre><code># Increase Maven memory\nexport MAVEN_OPTS=\"-Xmx2g -XX:MaxMetaspaceSize=512m\"\n\n# Or set in .mvn/jvm.config\necho \"-Xmx2g\" &gt; .mvn/jvm.config\n</code></pre></p>"},{"location":"rangereader/developer-guide/building/#clean-build","title":"Clean Build","text":"<p>If you encounter issues, try a clean build:</p> <pre><code># Clean everything\n./mvnw clean\n\n# Remove local repository cache (if needed)\nrm -rf ~/.m2/repository/io/tileverse/rangereader\n\n# Fresh build\n./mvnw clean compile test package\n</code></pre>"},{"location":"rangereader/developer-guide/building/#release-process","title":"Release Process","text":"<p>The project uses automated CI/CD pipelines for publishing to Maven Central. All releases are handled through GitHub Actions workflows with proper quality gates, testing, and security.</p>"},{"location":"rangereader/developer-guide/building/#snapshot-publishing-automated","title":"Snapshot Publishing (Automated)","text":"<p>Snapshots are automatically published to Maven Central when:</p> <ol> <li>Code is pushed to the <code>main</code> branch</li> <li>All PR validation tests pass (lint, build, integration tests across Java 17/21/24)</li> <li>The commit message doesn't contain <code>[skip-publish]</code></li> </ol> <p>Workflow: <code>.github/workflows/publish-snapshot.yml</code></p> <ul> <li>Triggers after successful completion of PR validation workflow</li> <li>Uses GPG signing with organization secrets (<code>-Dgpg.skip=false</code>)</li> <li>Publishes to Maven Central via Sonatype Central Portal</li> <li>Skippable with <code>[skip-publish]</code> in commit message</li> </ul>"},{"location":"rangereader/developer-guide/building/#release-publishing-automated","title":"Release Publishing (Automated)","text":"<p>Releases are automatically published when you create a version tag:</p> <pre><code># Create and push a version tag\ngit tag v1.0.0\ngit push origin v1.0.0\n</code></pre> <p>Workflow: <code>.github/workflows/publish-release.yml</code></p> <ul> <li>Extracts version from tag (e.g., <code>v1.0.0</code> \u2192 <code>1.0.0</code>)</li> <li>Runs full test suite with the release version</li> <li>Signs artifacts with GPG (<code>-Dgpg.skip=false</code>)</li> <li>Publishes to Maven Central</li> <li>Creates GitHub release with Maven Central links</li> </ul>"},{"location":"rangereader/developer-guide/building/#manual-release-alternative","title":"Manual Release (Alternative)","text":"<p>You can also trigger a release manually without creating a tag:</p> <ol> <li>Go to Actions \u2192 \"Publish Release\"</li> <li>Click \"Run workflow\"</li> <li>Enter the desired version (e.g., <code>1.0.0</code>)</li> </ol>"},{"location":"rangereader/developer-guide/building/#required-secrets","title":"Required Secrets","text":"<p>The following organization-level GitHub secrets must be configured:</p> <ul> <li><code>GPG_PRIVATE_KEY</code> - Exported GPG private key for artifact signing</li> <li><code>GPG_PASSPHRASE</code> - GPG key passphrase</li> <li><code>CENTRAL_USERNAME</code> - Sonatype Central Portal username</li> <li><code>CENTRAL_TOKEN</code> - Sonatype Central Portal token</li> </ul>"},{"location":"rangereader/developer-guide/building/#gpg-key-setup","title":"GPG Key Setup","text":"<p>For maintainers setting up GPG keys:</p> <pre><code># Generate 4096-bit RSA key\ngpg --full-generate-key\n\n# Export for GitHub secrets\ngpg --armor --export-secret-keys [KEY-ID] &gt; private-key.asc\n\n# Upload to keyservers\ngpg --keyserver keyserver.ubuntu.com --send-keys [KEY-ID]\ngpg --keyserver keys.openpgp.org --send-keys [KEY-ID]\n</code></pre>"},{"location":"rangereader/developer-guide/building/#local-development-publishing","title":"Local Development Publishing","text":"<p>For testing the publishing process locally, you need to configure your <code>~/.m2/settings.xml</code>:</p> <pre><code>&lt;settings&gt;\n  &lt;servers&gt;\n    &lt;server&gt;\n      &lt;id&gt;central&lt;/id&gt;\n      &lt;username&gt;YOUR_SONATYPE_USERNAME&lt;/username&gt;\n      &lt;password&gt;YOUR_SONATYPE_TOKEN&lt;/password&gt;\n    &lt;/server&gt;\n  &lt;/servers&gt;\n\n  &lt;profiles&gt;\n    &lt;profile&gt;\n      &lt;id&gt;gpg-config&lt;/id&gt;\n      &lt;properties&gt;\n        &lt;gpg.keyname&gt;YOUR_GPG_KEY_ID&lt;/gpg.keyname&gt;\n      &lt;/properties&gt;\n    &lt;/profile&gt;\n  &lt;/profiles&gt;\n\n  &lt;activeProfiles&gt;\n    &lt;activeProfile&gt;gpg-config&lt;/activeProfile&gt;\n  &lt;/activeProfiles&gt;\n&lt;/settings&gt;\n</code></pre> <p>Key Selection: If you have multiple GPG keys with the same email, specify the exact key ID in the <code>gpg.keyname</code> property to ensure Maven uses the correct key for signing.</p> <pre><code># Snapshot to local repository\n./mvnw clean install\n\n# Test Maven Central publishing (requires configuration above)\n./mvnw clean deploy -Drevision=1.0.0-test -Dgpg.skip=false\n</code></pre>"},{"location":"rangereader/developer-guide/building/#performance-considerations","title":"Performance Considerations","text":""},{"location":"rangereader/developer-guide/building/#build-performance","title":"Build Performance","text":"<pre><code># Parallel builds\n./mvnw -T 4 clean compile\n\n# Skip non-essential plugins during development\n./mvnw compile -Dspotless.skip -Dsortpom.skip\n\n# Use offline mode (when dependencies are cached)\n./mvnw -o compile\n</code></pre>"},{"location":"rangereader/developer-guide/building/#test-performance","title":"Test Performance","text":"<pre><code># Run tests in parallel\n./mvnw test -Dparallel=classes -DthreadCount=4\n\n# Reuse TestContainers\nexport TESTCONTAINERS_REUSE_ENABLE=true\n./mvnw test -Dtest=\"*IT\"\n</code></pre>"},{"location":"rangereader/developer-guide/building/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture: Understand the codebase structure</li> <li>Testing: Learn about the testing strategy</li> <li>Contributing: Guidelines for contributing code</li> </ul>"},{"location":"rangereader/developer-guide/contributing/","title":"Contributing","text":"<p>Guidelines for contributing to the Tileverse Range Reader library.</p>"},{"location":"rangereader/developer-guide/contributing/#our-mission-unifying-the-java-geospatial-ecosystem","title":"Our Mission: Unifying the Java Geospatial Ecosystem","text":"<p>The Tileverse Range Reader project addresses a critical architectural gap in the Java ecosystem. We're building the unified I/O foundation that the geospatial community has needed\u2014a lightweight, extensible abstraction comparable to Python's fsspec library.</p>"},{"location":"rangereader/developer-guide/contributing/#strategic-impact","title":"Strategic Impact","text":"<p>Your contributions help solve real ecosystem problems:</p> <ul> <li>Reduce fragmentation: Every major Java geospatial library has implemented its own incompatible I/O solution</li> <li>Lower barriers: Make it easier for developers to build cloud-native format readers</li> <li>Improve performance: Enable consistent optimization patterns across the ecosystem</li> <li>Foster innovation: Provide a stable foundation for next-generation geospatial tools</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#ecosystem-integration-goals","title":"Ecosystem Integration Goals","text":"<p>We're actively working toward broader ecosystem adoption:</p> <ol> <li>Format Library Integration: Collaborating with projects like <code>imageio-ext</code> and <code>netCDF-Java</code> to consolidate around our unified API</li> <li>Community Standards: Proposing our patterns as community standards through organizations like LocationTech and OSGeo</li> <li>Cloud-Native Formats: Building reference implementations for PMTiles, GeoParquet, FlatGeobuf, and other emerging formats</li> <li>Framework Support: Ensuring compatibility with popular frameworks like GeoTools, Apache SIS, and GeoTrellis</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#getting-started","title":"Getting Started","text":""},{"location":"rangereader/developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 21+ for development (Java 17+ for runtime)</li> <li>Maven 3.9+ for building and dependency management</li> <li>Docker for integration tests with TestContainers</li> <li>Git for version control</li> <li>IDE with Java support (IntelliJ IDEA, Eclipse, or VS Code)</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and Clone:    <pre><code># Fork the repository on GitHub, then:\ngit clone https://github.com/YOUR_USERNAME/tileverse-rangereader.git\ncd tileverse-rangereader\n\n# Add upstream remote\ngit remote add upstream https://github.com/tileverse-io/tileverse-rangereader.git\n</code></pre></p> </li> <li> <p>Build and Test:    <pre><code># Build all modules\n./mvnw clean compile\n\n# Run unit tests\n./mvnw test\n\n# Run integration tests (requires Docker)\n./mvnw verify\n\n# Apply code formatting\n./mvnw spotless:apply\n</code></pre></p> </li> <li> <p>IDE Setup:</p> </li> <li>Import as Maven project</li> <li>Configure code style (Palantir Java Format)</li> <li>Enable annotation processing</li> <li>Set up run configurations for tests</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#contribution-types","title":"Contribution Types","text":""},{"location":"rangereader/developer-guide/contributing/#code-contributions","title":"Code Contributions","text":""},{"location":"rangereader/developer-guide/contributing/#new-features","title":"New Features","text":"<ul> <li>Add support for new storage backends</li> <li>Implement new optimization decorators</li> <li>Enhance existing functionality</li> <li>Add integration with cloud providers</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix incorrect behavior</li> <li>Resolve performance issues</li> <li>Address security vulnerabilities</li> <li>Improve error handling</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Optimize hot code paths</li> <li>Improve caching strategies</li> <li>Reduce memory usage</li> <li>Enhance network efficiency</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#documentation-contributions","title":"Documentation Contributions","text":""},{"location":"rangereader/developer-guide/contributing/#user-documentation","title":"User Documentation","text":"<ul> <li>Usage examples and tutorials</li> <li>Configuration guides</li> <li>Troubleshooting information</li> <li>Best practices</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#developer-documentation","title":"Developer Documentation","text":"<ul> <li>API documentation improvements</li> <li>Architecture explanations</li> <li>Contributing guidelines</li> <li>Performance analysis</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#testing-contributions","title":"Testing Contributions","text":""},{"location":"rangereader/developer-guide/contributing/#test-coverage","title":"Test Coverage","text":"<ul> <li>Unit tests for new functionality</li> <li>Integration tests for cloud providers</li> <li>Performance benchmarks</li> <li>Edge case validation</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#test-infrastructure","title":"Test Infrastructure","text":"<ul> <li>TestContainers improvements</li> <li>CI/CD enhancements</li> <li>Test data generation</li> <li>Benchmark automation</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#code-contribution-process","title":"Code Contribution Process","text":""},{"location":"rangereader/developer-guide/contributing/#1-planning-your-contribution","title":"1. Planning Your Contribution","text":"<p>Before starting work:</p> <ol> <li>Check existing issues for similar work</li> <li>Create an issue if one doesn't exist</li> <li>Discuss your approach with maintainers</li> <li>Get feedback on design decisions</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#2-development-workflow","title":"2. Development Workflow","text":""},{"location":"rangereader/developer-guide/contributing/#create-a-feature-branch","title":"Create a Feature Branch","text":"<pre><code># Update your fork\ngit checkout main\ngit pull upstream main\ngit push origin main\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#make-your-changes","title":"Make Your Changes","text":"<p>Follow these guidelines:</p> <ul> <li>Small, focused commits with clear messages</li> <li>Incremental development with working code at each step</li> <li>Follow existing patterns and conventions</li> <li>Write tests first when possible (TDD)</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commit format:</p> <pre><code>type(scope): brief description\n\nLonger description if needed\n\nFixes #123\n</code></pre> <p>Examples: <pre><code>feat(s3): add support for S3-compatible endpoints\nfix(cache): resolve memory leak in disk cache\ndocs(api): improve JavaDoc for RangeReader interface\ntest(azure): add integration tests for Azure authentication\n</code></pre></p>"},{"location":"rangereader/developer-guide/contributing/#3-code-quality-standards","title":"3. Code Quality Standards","text":""},{"location":"rangereader/developer-guide/contributing/#code-style","title":"Code Style","text":"<p>The project uses automated formatting and quality checks:</p> <pre><code># Apply code formatting\n./mvnw spotless:apply\n\n# Check formatting\n./mvnw spotless:check\n\n# Run all quality checks\n./mvnw validate\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#required-elements","title":"Required Elements","text":"<ol> <li>License Headers: All Java files must include Apache 2.0 license headers</li> <li>JavaDoc: Public APIs require comprehensive documentation</li> <li>Tests: All new functionality must have tests</li> <li>Thread Safety: All implementations must be thread-safe</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Code follows project conventions</li> <li> All tests pass locally</li> <li> New functionality has tests</li> <li> Public APIs have JavaDoc</li> <li> Performance impact considered</li> <li> Thread safety maintained</li> <li> Error handling appropriate</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#4-testing-requirements","title":"4. Testing Requirements","text":""},{"location":"rangereader/developer-guide/contributing/#unit-tests","title":"Unit Tests","text":"<p>All new functionality requires unit tests:</p> <pre><code>@Test\nvoid testNewFeature() throws IOException {\n    // Given\n    RangeReader reader = createTestReader();\n\n    // When\n    ByteBuffer result = reader.readRange(0, 1024);\n\n    // Then\n    assertEquals(1024, result.remaining());\n    // Additional assertions...\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#integration-tests","title":"Integration Tests","text":"<p>New data sources require integration tests:</p> <pre><code>@Testcontainers\npublic class NewDataSourceIT extends AbstractRangeReaderIT {\n\n    @Container\n    static GenericContainer&lt;?&gt; testContainer = new GenericContainer&lt;&gt;(\"test-image:latest\")\n        .withExposedPorts(8080);\n\n    @Override\n    protected RangeReader createBaseReader() throws IOException {\n        return NewDataSourceReader.builder()\n            .endpoint(testContainer.getHost())\n            .port(testContainer.getMappedPort(8080))\n            .build();\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#performance-tests","title":"Performance Tests","text":"<p>Performance-sensitive changes need benchmarks:</p> <pre><code>@Test\nvoid testPerformanceRegression() throws IOException {\n    RangeReader reader = createOptimizedReader();\n\n    long startTime = System.nanoTime();\n    for (int i = 0; i &lt; 1000; i++) {\n        reader.readRange(i * 1024, 1024);\n    }\n    long endTime = System.nanoTime();\n\n    double durationMs = (endTime - startTime) / 1_000_000.0;\n    assertTrue(durationMs &lt; 1000, \"Performance regression detected\");\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#5-pull-request-process","title":"5. Pull Request Process","text":""},{"location":"rangereader/developer-guide/contributing/#before-submitting","title":"Before Submitting","text":"<pre><code># Rebase on latest main\ngit fetch upstream\ngit rebase upstream/main\n\n# Run full test suite\n./mvnw clean verify\n\n# Check formatting and quality\n./mvnw validate\n\n# Push to your fork\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#pull-request-description","title":"Pull Request Description","text":"<p>Include in your PR description:</p> <pre><code>## Summary\nBrief description of changes\n\n## Changes Made\n- List of specific changes\n- Any breaking changes\n- Performance impact\n\n## Testing\n- Types of tests added\n- How to test the changes\n- Test coverage information\n\n## Documentation\n- Documentation updated\n- Examples provided\n- Breaking changes documented\n\nFixes #issue-number\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated Checks: CI must pass</li> <li>Code Review: At least one maintainer approval</li> <li>Testing: Integration tests in CI environment</li> <li>Documentation: Verify docs are updated</li> <li>Merge: Squash and merge when approved</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"rangereader/developer-guide/contributing/#architecture-principles","title":"Architecture Principles","text":""},{"location":"rangereader/developer-guide/contributing/#1-decorator-pattern","title":"1. Decorator Pattern","text":"<p>All decorators follow the same pattern:</p> <pre><code>public class MyDecorator extends AbstractRangeReader {\n    private final RangeReader delegate;\n\n    public MyDecorator(RangeReader delegate) {\n        this.delegate = delegate;\n    }\n\n    @Override\n    protected int readRangeNoFlip(long offset, int length, ByteBuffer target) \n            throws IOException {\n        // Add decoration logic here\n        return delegate.readRange(offset, length, target);\n    }\n\n    @Override\n    public void close() throws IOException {\n        delegate.close();\n    }\n\n    public static Builder builder(RangeReader delegate) {\n        return new Builder(delegate);\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#2-builder-pattern","title":"2. Builder Pattern","text":"<p>All readers provide fluent builders:</p> <pre><code>public static class Builder {\n    private String endpoint;\n    private Duration timeout = Duration.ofSeconds(30);\n\n    public Builder endpoint(String endpoint) {\n        this.endpoint = endpoint;\n        return this;\n    }\n\n    public Builder timeout(Duration timeout) {\n        this.timeout = timeout;\n        return this;\n    }\n\n    public MyRangeReader build() {\n        return new MyRangeReader(endpoint, timeout);\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#3-thread-safety","title":"3. Thread Safety","text":"<p>All implementations must be thread-safe:</p> <pre><code>public class ThreadSafeReader extends AbstractRangeReader {\n    private final AtomicLong requestCount = new AtomicLong();\n    private final ConcurrentHashMap&lt;String, String&gt; cache = new ConcurrentHashMap&lt;&gt;();\n\n    @Override\n    protected int readRangeNoFlip(long offset, int length, ByteBuffer target) \n            throws IOException {\n        requestCount.incrementAndGet();\n        // Thread-safe implementation\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#performance-considerations","title":"Performance Considerations","text":""},{"location":"rangereader/developer-guide/contributing/#memory-management","title":"Memory Management","text":"<ul> <li>Use off-heap storage for large caches</li> <li>Implement proper cleanup in <code>close()</code> methods</li> <li>Avoid memory leaks in long-running applications</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#network-optimization","title":"Network Optimization","text":"<ul> <li>Minimize network requests through block alignment</li> <li>Use connection pooling for HTTP clients</li> <li>Implement retry logic with exponential backoff</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Design cache keys for optimal hit rates</li> <li>Implement cache eviction policies</li> <li>Monitor cache performance metrics</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#error-handling","title":"Error Handling","text":""},{"location":"rangereader/developer-guide/contributing/#exception-types","title":"Exception Types","text":"<p>Use specific exception types:</p> <pre><code>// Good: Specific exception types\npublic class AuthenticationFailedException extends IOException {\n    public AuthenticationFailedException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n\n// Avoid: Generic exceptions\nthrow new RuntimeException(\"Something went wrong\");\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#error-context","title":"Error Context","text":"<p>Provide helpful error messages:</p> <pre><code>// Good: Contextual error information\nthrow new IOException(\n    \"Failed to read range [\" + offset + \", \" + (offset + length) + \") \" +\n    \"from \" + getSourceIdentifier() + \": \" + e.getMessage(), e);\n\n// Avoid: Unclear errors\nthrow new IOException(\"Read failed\", e);\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#retry-logic","title":"Retry Logic","text":"<p>Implement appropriate retry strategies:</p> <pre><code>public ByteBuffer readWithRetry(long offset, int length) throws IOException {\n    int attempts = 0;\n    while (attempts &lt; maxRetries) {\n        try {\n            return readRange(offset, length);\n        } catch (IOException e) {\n            if (isRetryable(e) &amp;&amp; attempts &lt; maxRetries - 1) {\n                attempts++;\n                sleep(calculateDelay(attempts));\n                continue;\n            }\n            throw e;\n        }\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"rangereader/developer-guide/contributing/#communication","title":"Communication","text":"<ul> <li>Be respectful and professional in all interactions</li> <li>Ask questions when you need clarification</li> <li>Share knowledge and help others learn</li> <li>Provide constructive feedback in code reviews</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting bugs:</p> <ol> <li>Search existing issues first</li> <li>Provide minimal reproduction case</li> <li>Include environment details (Java version, OS, etc.)</li> <li>Add relevant logs and stack traces</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#feature-requests","title":"Feature Requests","text":"<p>For new features:</p> <ol> <li>Explain the use case and motivation</li> <li>Discuss alternatives you've considered</li> <li>Provide implementation ideas if possible</li> <li>Consider compatibility with existing APIs</li> </ol>"},{"location":"rangereader/developer-guide/contributing/#recognition","title":"Recognition","text":""},{"location":"rangereader/developer-guide/contributing/#contributors","title":"Contributors","text":"<p>We recognize contributions through:</p> <ul> <li>Contributor list in documentation</li> <li>Release notes acknowledgment  </li> <li>GitHub contributor statistics</li> <li>Community spotlight for major contributions</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#maintainer-path","title":"Maintainer Path","text":"<p>Active contributors may be invited to become maintainers based on:</p> <ul> <li>Consistent quality contributions</li> <li>Community engagement and support</li> <li>Technical expertise in relevant areas</li> <li>Commitment to project goals</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#getting-help","title":"Getting Help","text":""},{"location":"rangereader/developer-guide/contributing/#resources","title":"Resources","text":"<ul> <li>Documentation: Start with user and developer guides</li> <li>Examples: Check the <code>examples/</code> directory</li> <li>Tests: Review existing tests for patterns</li> <li>Issues: Search GitHub issues for similar problems</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#contact","title":"Contact","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>Discussions: For questions and ideas</li> <li>Email: For security issues and sensitive topics</li> <li>Discord/Slack: For real-time community chat (link in README)</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#mentorship","title":"Mentorship","text":"<p>New contributors can get help through:</p> <ul> <li>Good first issues: Labeled issues for beginners</li> <li>Mentoring: Experienced contributors provide guidance</li> <li>Pair programming: Virtual sessions for complex features</li> <li>Code review: Learning through the review process</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#legal","title":"Legal","text":""},{"location":"rangereader/developer-guide/contributing/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>By contributing, you agree that:</p> <ul> <li>Your contributions are your original work</li> <li>You grant the project rights to use your contributions</li> <li>Your contributions are under the Apache 2.0 license</li> <li>You have authority to make the contribution</li> </ul>"},{"location":"rangereader/developer-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project follows a Code of Conduct that requires:</p> <ul> <li>Respectful communication with all participants</li> <li>Constructive feedback and criticism</li> <li>Inclusive behavior welcoming to all backgrounds</li> <li>Professional conduct in all project spaces</li> </ul> <p>Violations can be reported to project maintainers and will be addressed according to established procedures.</p>"},{"location":"rangereader/developer-guide/contributing/#api-stability","title":"API Stability","text":""},{"location":"rangereader/developer-guide/contributing/#stable-apis-semantic-versioning","title":"Stable APIs (Semantic Versioning)","text":"<p>The following APIs follow semantic versioning guarantees:</p> <ul> <li><code>RangeReader</code> interface: Core contract that won't change incompatibly</li> <li><code>AbstractRangeReader</code> public methods: Base implementation signatures  </li> <li>Builder public APIs: All builder methods and their behavior</li> <li>Core decorator classes: <code>CachingRangeReader</code>, <code>DiskCachingRangeReader</code></li> </ul> <p>Changes to these APIs require major version increments and migration guides.</p>"},{"location":"rangereader/developer-guide/contributing/#experimental-apis-subject-to-change","title":"Experimental APIs (Subject to Change)","text":"<p>The following may change between minor versions:</p> <ul> <li>Internal implementation details: Package-private classes and methods</li> <li>Benchmark and testing utilities: Performance testing infrastructure</li> <li>SPI interfaces: Service provider interfaces may evolve</li> <li>Configuration classes: Internal configuration objects</li> </ul> <p>When working with experimental APIs, expect potential changes and plan accordingly.</p>"},{"location":"rangereader/developer-guide/contributing/#next-steps","title":"Next Steps","text":"<p>Ready to contribute? Here's how to get started:</p> <ol> <li>Browse issues labeled \"good first issue\"</li> <li>Join discussions about features you're interested in</li> <li>Set up your development environment</li> <li>Start with documentation or small bug fixes</li> <li>Ask questions and engage with the community</li> </ol> <p>Your contributions help build the foundation for the next generation of cloud-native geospatial applications in Java. Welcome to the community! EOF &lt; /dev/null</p>"},{"location":"rangereader/developer-guide/performance/","title":"Performance","text":"<p>Performance optimization techniques and guidelines for the Tileverse Range Reader library.</p>"},{"location":"rangereader/developer-guide/performance/#overview","title":"Overview","text":"<p>The Tileverse Range Reader is designed for high-performance cloud-native data access. This section covers optimization strategies, measurement techniques, and best practices for achieving optimal performance in production environments.</p>"},{"location":"rangereader/developer-guide/performance/#performance-fundamentals","title":"Performance Fundamentals","text":""},{"location":"rangereader/developer-guide/performance/#cloud-storage-performance-characteristics","title":"Cloud Storage Performance Characteristics","text":"<p>Different storage backends have distinct performance profiles:</p> Storage Type Latency Throughput Best Block Size Optimization Strategy Local Files ~1ms Very High N/A OS page cache, direct file access HTTP/HTTPS 50-500ms Medium-High 256KB-1MB Connection pooling, compression Amazon S3 100-200ms High 1MB-8MB Request consolidation, multipart Azure Blob 80-150ms High 1MB-4MB Block blob optimization Google Cloud 50-150ms High 1MB-8MB Regional proximity"},{"location":"rangereader/developer-guide/performance/#the-performance-stack","title":"The Performance Stack","text":"<p>Performance optimization involves multiple layers:</p> <pre><code>Application Layer\n    \u2193\nMemory Cache (CachingRangeReader)\n    \u2193\nDisk Cache (DiskCachingRangeReader)\n    \u2193\nNetwork/Storage Layer (S3, Azure, HTTP, File)\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"rangereader/developer-guide/performance/#1-multi-level-caching","title":"1. Multi-Level Caching","text":"<p>Configure caching layers for maximum efficiency:</p>"},{"location":"rangereader/developer-guide/performance/#memory-caching-configuration","title":"Memory Caching Configuration","text":"<pre><code>// High-performance memory cache\nvar reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(2000)                    // Number of cached ranges\n    .maxSizeBytes(512 * 1024 * 1024)      // 512MB memory limit\n    .expireAfterAccess(30, TimeUnit.MINUTES)\n    .recordStats()                        // Enable performance monitoring\n    .build();\n\n// Memory-constrained environments\nvar reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(500)\n    .softValues()                         // Allow GC to reclaim memory\n    .expireAfterAccess(10, TimeUnit.MINUTES)\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#disk-caching-configuration","title":"Disk Caching Configuration","text":"<pre><code>// Large dataset disk caching\nvar reader = DiskCachingRangeReader.builder(baseReader)\n    .cacheDirectory(\"/fast-ssd/cache\")    // Use fast storage\n    .maxCacheSizeBytes(10L * 1024 * 1024 * 1024)  // 10GB cache\n    .compressionEnabled(true)             // Compress cached data\n    .recordStats()\n    .build();\n\n// Temporary processing\nvar reader = DiskCachingRangeReader.builder(baseReader)\n    .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB cache\n    .deleteOnClose()                      // Clean up automatically\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#2-intelligent-caching-strategies","title":"2. Intelligent Caching Strategies","text":""},{"location":"rangereader/developer-guide/performance/#memory-caching-for-frequent-access","title":"Memory Caching for Frequent Access","text":"<p>Optimize for frequently accessed data:</p> <pre><code>// Cloud storage with memory caching\nvar reader = CachingRangeReader.builder(cloudReader)\n    .maximumSize(2000)                   // Cache frequently accessed ranges\n    .expireAfterAccess(30, TimeUnit.MINUTES)\n    .recordStats()                       // Monitor cache performance\n    .build();\n\n// HTTP with memory caching for repeated requests\nvar reader = CachingRangeReader.builder(httpReader)\n    .maximumSize(1000)                   // Moderate cache size\n    .maxSizeBytes(256 * 1024 * 1024)     // 256MB memory limit\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#multi-level-caching-strategy","title":"Multi-Level Caching Strategy","text":"<p>Combine memory and disk caching for optimal performance:</p> <pre><code>// Optimal decorator stacking for cloud storage\nvar reader = \n    // Memory cache for immediate access\n    CachingRangeReader.builder(\n        // Disk cache for persistence and large datasets\n        DiskCachingRangeReader.builder(s3Reader)\n            .maxCacheSizeBytes(5L * 1024 * 1024 * 1024)  // 5GB disk\n            .build())\n        .maximumSize(1000)                              // 1000 entries in memory\n        .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#3-connection-and-request-optimization","title":"3. Connection and Request Optimization","text":""},{"location":"rangereader/developer-guide/performance/#http-client-configuration","title":"HTTP Client Configuration","text":"<pre><code>var reader = HttpRangeReader.builder()\n    .uri(uri)\n    .connectTimeout(Duration.ofSeconds(10))\n    .readTimeout(Duration.ofMinutes(5))\n    .maxConnections(50)                   // Connection pool size\n    .keepAlive(Duration.ofMinutes(5))     // Connection reuse\n    .compressionEnabled(true)             // Enable gzip compression\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#aws-s3-client-optimization","title":"AWS S3 Client Optimization","text":"<p>The S3 module automatically uses the Apache HttpClient, removing the need to manage Netty dependencies. You can still customize the S3 client for performance tuning:</p> <pre><code>var s3Client = S3Client.builder()\n    .region(Region.US_WEST_2)\n    .httpClient(ApacheHttpClient.builder()\n        .maxConnections(100)\n        .socketTimeout(Duration.ofSeconds(60))\n        .build())\n    .overrideConfiguration(ClientOverrideConfiguration.builder()\n        .apiCallTimeout(Duration.ofMinutes(2))\n        .retryPolicy(RetryPolicy.builder().numRetries(3).build())\n        .build())\n    .build();\n\nvar reader = S3RangeReader.builder()\n    .client(s3Client)\n    .bucket(bucket)\n    .key(key)\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#benchmarking-and-measurement","title":"Benchmarking and Measurement","text":""},{"location":"rangereader/developer-guide/performance/#jmh-benchmarks","title":"JMH Benchmarks","text":"<p>The project includes comprehensive JMH benchmarks:</p> <pre><code># Build benchmarks\n./mvnw package -pl benchmarks\n\n# Run all benchmarks\njava -jar benchmarks/target/benchmarks.jar\n\n# Run specific benchmark categories\njava -jar benchmarks/target/benchmarks.jar S3RangeReader\njava -jar benchmarks/target/benchmarks.jar HttpRangeReader\njava -jar benchmarks/target/benchmarks.jar CachingRangeReader\n\n# Run with profiling\njava -jar benchmarks/target/benchmarks.jar -prof gc         # GC profiling\njava -jar benchmarks/target/benchmarks.jar -prof stack     # Stack profiling\njava -jar benchmarks/target/benchmarks.jar -prof async     # Async profiler\n\n# Custom benchmark parameters\njava -jar benchmarks/target/benchmarks.jar \\\n    -p blockSize=1048576,4194304,8388608 \\\n    -p cacheSize=100,1000,10000 \\\n    -f 3 -wi 5 -i 10\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"rangereader/developer-guide/performance/#cache-statistics","title":"Cache Statistics","text":"<pre><code>public void monitorCachePerformance(RangeReader reader) {\n    if (reader instanceof CachingRangeReader cachingReader) {\n        CacheStats stats = cachingReader.getCacheStats();\n\n        System.out.printf(\"Cache Hit Rate: %.2f%%\\n\", stats.hitRate() * 100);\n        System.out.printf(\"Request Count: %d\\n\", stats.requestCount());\n        System.out.printf(\"Average Load Time: %.2fms\\n\", \n            stats.averageLoadPenalty() / 1_000_000.0);\n        System.out.printf(\"Eviction Count: %d\\n\", stats.evictionCount());\n\n        // Alert on poor performance\n        if (stats.hitRate() &lt; 0.8 &amp;&amp; stats.requestCount() &gt; 100) {\n            System.err.println(\"WARNING: Cache hit rate below 80%\");\n        }\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#throughput-measurement","title":"Throughput Measurement","text":"<pre><code>public void measureThroughput(RangeReader reader, int iterations) throws IOException {\n    int blockSize = 1024 * 1024; // 1MB blocks\n    long totalBytes = 0;\n    long startTime = System.nanoTime();\n\n    for (int i = 0; i &lt; iterations; i++) {\n        ByteBuffer data = reader.readRange(i * blockSize, blockSize);\n        totalBytes += data.remaining();\n    }\n\n    long endTime = System.nanoTime();\n    double durationSeconds = (endTime - startTime) / 1_000_000_000.0;\n    double throughputMBps = (totalBytes / (1024.0 * 1024.0)) / durationSeconds;\n\n    System.out.printf(\"Throughput: %.2f MB/s\\n\", throughputMBps);\n    System.out.printf(\"Total: %d bytes in %.2f seconds\\n\", totalBytes, durationSeconds);\n}\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#latency-analysis","title":"Latency Analysis","text":"<pre><code>public void analyzeLatency(RangeReader reader, int samples) throws IOException {\n    List&lt;Long&gt; latencies = new ArrayList&lt;&gt;();\n    int blockSize = 64 * 1024; // 64KB blocks\n\n    // Warm up\n    for (int i = 0; i &lt; 10; i++) {\n        reader.readRange(i * blockSize, blockSize);\n    }\n\n    // Measure latencies\n    for (int i = 0; i &lt; samples; i++) {\n        long startTime = System.nanoTime();\n        reader.readRange(i * blockSize, blockSize);\n        long endTime = System.nanoTime();\n\n        latencies.add(endTime - startTime);\n    }\n\n    // Calculate statistics\n    latencies.sort(Long::compareTo);\n    long p50 = latencies.get(samples / 2);\n    long p95 = latencies.get((int) (samples * 0.95));\n    long p99 = latencies.get((int) (samples * 0.99));\n\n    System.out.printf(\"Latency P50: %.2fms\\n\", p50 / 1_000_000.0);\n    System.out.printf(\"Latency P95: %.2fms\\n\", p95 / 1_000_000.0);\n    System.out.printf(\"Latency P99: %.2fms\\n\", p99 / 1_000_000.0);\n}\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#cloud-specific-optimizations","title":"Cloud-Specific Optimizations","text":""},{"location":"rangereader/developer-guide/performance/#amazon-s3-optimization","title":"Amazon S3 Optimization","text":"<pre><code>// Regional optimization\nvar reader = S3RangeReader.builder()\n    .uri(s3Uri)\n    .region(Region.US_WEST_2)              // Same region as application\n    .acceleratedEndpoint(true)             // S3 Transfer Acceleration\n    .pathStyleAccess(false)                // Virtual-hosted style\n    .build();\n\n// Large object optimization with caching\nvar reader = CachingRangeReader.builder(s3Reader)\n    .maximumSize(500)                     // Cache for large objects\n    .maxSizeBytes(512 * 1024 * 1024)      // 512MB for large chunks\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#azure-blob-storage-optimization","title":"Azure Blob Storage Optimization","text":"<pre><code>// Premium storage optimization\nvar reader = AzureBlobRangeReader.builder()\n    .uri(azureUri)\n    .sasToken(sasToken)\n    .retryOptions(new RetryOptions()\n        .setMaxRetryDelayInMs(1000)\n        .setMaxTries(3)\n        .setRetryDelayInMs(100))\n    .build();\n\n// Hot tier optimization with caching\nvar reader = CachingRangeReader.builder(azureReader)\n    .maximumSize(1000)                    // Cache for hot tier access\n    .expireAfterAccess(1, TimeUnit.HOURS) // Longer retention for hot data\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#httphttps-optimization","title":"HTTP/HTTPS Optimization","text":"<pre><code>// CDN optimization\nvar reader = HttpRangeReader.builder()\n    .uri(cdnUri)\n    .withBearerToken(token)\n    .compressionEnabled(true)             // Enable compression\n    .maxConnections(20)                   // Limit connections to CDN\n    .keepAlive(Duration.ofMinutes(10))    // Long keepalive for CDN\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#performance-troubleshooting","title":"Performance Troubleshooting","text":""},{"location":"rangereader/developer-guide/performance/#common-performance-issues","title":"Common Performance Issues","text":""},{"location":"rangereader/developer-guide/performance/#low-cache-hit-rate","title":"Low Cache Hit Rate","text":"<p>Symptoms: High latency, many network requests Causes: Poor access patterns, cache too small, incorrect block alignment Solutions:</p> <pre><code>// Increase cache size\nvar reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(5000)                    // Increase from default\n    .maxSizeBytes(1024 * 1024 * 1024)     // 1GB cache\n    .build();\n\n// Optimize caching strategy\nvar reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(2000)                    // Increase cache size\n    .maxSizeBytes(512 * 1024 * 1024)      // 512MB memory limit\n    .recordStats()                        // Monitor performance\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptoms: OutOfMemoryError, GC pressure Causes: Large cache, large block sizes, memory leaks Solutions:</p> <pre><code>// Use soft references\nvar reader = CachingRangeReader.builder(baseReader)\n    .softValues()                         // Allow GC to reclaim\n    .maximumSize(1000)                    // Smaller cache\n    .build();\n\n// Use disk caching instead\nvar reader = DiskCachingRangeReader.builder(baseReader)\n    .maxCacheSizeBytes(2L * 1024 * 1024 * 1024)  // 2GB on disk\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#slow-network-performance","title":"Slow Network Performance","text":"<p>Symptoms: High latency, low throughput, timeouts Causes: Small block sizes, too many requests, network congestion Solutions:</p> <pre><code>// Use disk caching for better throughput\nvar reader = DiskCachingRangeReader.builder(cloudReader)\n    .maxCacheSizeBytes(2L * 1024 * 1024 * 1024)  // 2GB disk cache\n    .build();\n\n// Increase timeouts\nvar reader = HttpRangeReader.builder()\n    .uri(uri)\n    .connectTimeout(Duration.ofSeconds(30))\n    .readTimeout(Duration.ofMinutes(10))\n    .maxRetries(5)\n    .build();\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#performance-testing-guidelines","title":"Performance Testing Guidelines","text":""},{"location":"rangereader/developer-guide/performance/#load-testing","title":"Load Testing","text":"<pre><code>@Test\nvoid loadTest() throws Exception {\n    int threadCount = 10;\n    int iterationsPerThread = 100;\n    ExecutorService executor = Executors.newFixedThreadPool(threadCount);\n    CountDownLatch latch = new CountDownLatch(threadCount);\n    AtomicLong totalBytes = new AtomicLong();\n\n    long startTime = System.nanoTime();\n\n    for (int i = 0; i &lt; threadCount; i++) {\n        executor.submit(() -&gt; {\n            try {\n                for (int j = 0; j &lt; iterationsPerThread; j++) {\n                    ByteBuffer data = reader.readRange(j * 1024, 1024);\n                    totalBytes.addAndGet(data.remaining());\n                }\n            } catch (IOException e) {\n                fail(\"Read failed\", e);\n            } finally {\n                latch.countDown();\n            }\n        });\n    }\n\n    assertTrue(latch.await(30, TimeUnit.SECONDS), \"Load test timed out\");\n\n    long endTime = System.nanoTime();\n    double durationSeconds = (endTime - startTime) / 1_000_000_000.0;\n    double throughputMBps = (totalBytes.get() / (1024.0 * 1024.0)) / durationSeconds;\n\n    System.out.printf(\"Concurrent throughput: %.2f MB/s\\n\", throughputMBps);\n    assertTrue(throughputMBps &gt; 10.0, \"Throughput below minimum threshold\");\n}\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#memory-leak-detection","title":"Memory Leak Detection","text":"<pre><code>@Test\nvoid memoryLeakTest() throws Exception {\n    Runtime runtime = Runtime.getRuntime();\n    System.gc();\n    long initialMemory = runtime.totalMemory() - runtime.freeMemory();\n\n    // Perform many operations\n    for (int i = 0; i &lt; 10000; i++) {\n        try (RangeReader reader = createReader()) {\n            reader.readRange(0, 1024);\n        }\n    }\n\n    System.gc();\n    long finalMemory = runtime.totalMemory() - runtime.freeMemory();\n    long memoryIncrease = finalMemory - initialMemory;\n\n    System.out.printf(\"Memory increase: %d bytes\\n\", memoryIncrease);\n    assertTrue(memoryIncrease &lt; 10 * 1024 * 1024, \n        \"Memory leak detected: \" + memoryIncrease + \" bytes\");\n}\n</code></pre>"},{"location":"rangereader/developer-guide/performance/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"rangereader/developer-guide/performance/#configuration-guidelines","title":"Configuration Guidelines","text":"<ol> <li>Read Strategies:</li> <li>Local files: Direct access (OS caching is optimal)</li> <li>HTTP: Chunked reads with caching</li> <li> <p>Cloud storage: Large reads with multi-level caching</p> </li> <li> <p>Cache Sizing:</p> </li> <li>Memory cache: 10-20% of available heap</li> <li>Disk cache: Based on available storage</li> <li> <p>Consider data access patterns</p> </li> <li> <p>Connection Management:</p> </li> <li>Reuse connections where possible</li> <li>Configure appropriate timeouts</li> <li>Limit concurrent connections</li> </ol>"},{"location":"rangereader/developer-guide/performance/#monitoring-recommendations","title":"Monitoring Recommendations","text":"<ol> <li>Key Metrics:</li> <li>Cache hit rate (target: &gt;80%)</li> <li>Average latency (target: &lt;200ms for cloud)</li> <li>Throughput (baseline and trends)</li> <li> <p>Memory usage (heap and off-heap)</p> </li> <li> <p>Alerting Thresholds:</p> </li> <li>Cache hit rate &lt; 70%</li> <li>P95 latency &gt; 1000ms</li> <li>Memory usage &gt; 80% of heap</li> <li>Error rate &gt; 1%</li> </ol>"},{"location":"rangereader/developer-guide/performance/#production-deployment","title":"Production Deployment","text":"<ol> <li> <p>JVM Tuning:    <pre><code>-Xmx4g                                 # Adequate heap size\n-XX:+UseG1GC                          # Low-latency GC\n-XX:MaxGCPauseMillis=100              # GC pause target\n-XX:+UnlockExperimentalVMOptions\n-XX:+UseCGroupMemoryLimitForHeap      # Container awareness\n</code></pre></p> </li> <li> <p>Application Configuration:    <pre><code>// Production-ready configuration\nvar reader = CachingRangeReader.builder(\n    DiskCachingRangeReader.builder(cloudReader)\n        .maxCacheSizeBytes(5L * 1024 * 1024 * 1024)\n        .build())\n    .maximumSize(2000)\n    .recordStats()\n    .build();\n</code></pre></p> </li> </ol> <p>This performance guide provides the foundation for optimizing range-based I/O operations across different storage backends and usage patterns. EOF &lt; /dev/null</p>"},{"location":"rangereader/developer-guide/testing/","title":"Testing","text":"<p>Comprehensive testing strategy and guidelines for the Tileverse Range Reader library.</p>"},{"location":"rangereader/developer-guide/testing/#testing-strategy","title":"Testing Strategy","text":"<p>The project employs a multi-layered testing approach:</p> <ul> <li>Unit Tests (<code>*Test.java</code>): Fast, isolated tests</li> <li>Integration Tests (<code>*IT.java</code>): End-to-end tests with real services</li> <li>Performance Tests (<code>*PerformanceTest.java</code>): Throughput and latency analysis</li> <li>Benchmarks: JMH-based comprehensive performance testing</li> </ul>"},{"location":"rangereader/developer-guide/testing/#test-categories","title":"Test Categories","text":""},{"location":"rangereader/developer-guide/testing/#unit-tests","title":"Unit Tests","text":"<p>Fast tests that verify individual components in isolation:</p> <pre><code># Run all unit tests (recommended)\nmake test-unit\n\n# Module-specific unit tests\nmake test-core     # Core module only\nmake test-s3       # S3 module only\nmake test-azure    # Azure module only\nmake test-gcs      # GCS module only\n\n# Direct Maven commands for specific test classes/methods\n./mvnw test -Dtest=\"CachingRangeReaderTest\"                    # Specific class\n./mvnw test -Dtest=\"CachingRangeReaderTest#testBasicCaching\"   # Specific method\n./mvnw test -pl src/core -Dtest=\"FileRangeReaderTest\"         # Class in specific module\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#example-unit-test","title":"Example Unit Test","text":"<pre><code>@Test\nvoid testBasicFileReading() throws IOException {\n    Path testFile = Files.createTempFile(\"test\", \".bin\");\n    Files.write(testFile, \"Hello, World!\".getBytes());\n\n    try (var reader = FileRangeReader.builder()\n            .path(testFile)\n            .build()) {\n\n        ByteBuffer result = reader.readRange(0, 5);\n        assertEquals(\"Hello\", new String(result.array(), 0, result.remaining()));\n    }\n\n    Files.deleteIfExists(testFile);\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#integration-tests","title":"Integration Tests","text":"<p>End-to-end tests using TestContainers for realistic scenarios:</p> <pre><code># Run all integration tests (recommended)\nmake test-it\n\n# Module-specific integration tests\nmake test-core-it  # Core integration tests (HTTP with Nginx)\nmake test-s3-it    # S3 integration tests (LocalStack + MinIO)\nmake test-azure-it # Azure integration tests (Azurite)\nmake test-gcs-it   # GCS integration tests\n\n# With TestContainers reuse for faster execution\nexport TESTCONTAINERS_REUSE_ENABLE=true\nmake test-it\n\n# Direct Maven commands for integration tests\n./mvnw verify -pl src/s3                # All S3 integration tests\n./mvnw verify -pl src/azure             # All Azure integration tests\n./mvnw verify -pl src/core              # All core integration tests\n./mvnw verify                           # All integration tests\n\n# For specific integration test classes (rarely needed)\n./mvnw test -pl src/s3 -Dtest=\"S3RangeReaderIT\"        # Specific S3 test\n./mvnw test -pl src/azure -Dtest=\"AzureBlobRangeReaderIT\" # Specific Azure test\n\n# Note: Module-specific make targets run ALL integration tests in that module\n# This is usually what you want for comprehensive testing\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#testcontainers-setup","title":"TestContainers Setup","text":"<p>All integration tests extend a common base class:</p> <pre><code>@Testcontainers(disabledWithoutDocker = true)\npublic class S3RangeReaderIT extends AbstractRangeReaderIT {\n\n    @Container\n    static LocalStackContainer localstack = new LocalStackContainer(\n            DockerImageName.parse(\"localstack/localstack:3.2.0\"))\n        .withServices(LocalStackContainer.Service.S3);\n\n    @Override\n    protected RangeReader createBaseReader() throws IOException {\n        return S3RangeReader.builder()\n            .endpointOverride(localstack.getEndpoint())\n            .region(Region.of(localstack.getRegion()))\n            .build();\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#performance-tests","title":"Performance Tests","text":"<p>Measure performance characteristics under various conditions:</p> <pre><code># Run performance tests (recommended)\nmake perf-test\n\n# Direct Maven commands\n./mvnw test -Dtest=\"*PerformanceTest\"                                   # All performance tests\n./mvnw test -Dtest=\"RangeReaderPerformanceTest\" -Dperformance.iterations=1000  # With custom parameters\n./mvnw test -pl src/core -Dtest=\"*PerformanceTest\"                    # Module-specific\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#example-performance-test","title":"Example Performance Test","text":"<pre><code>@Test\nvoid testLargeFilePerformance() throws IOException {\n    Path largeFile = createLargeTestFile(100 * 1024 * 1024); // 100MB\n\n    try (var reader = FileRangeReader.builder()\n            .path(largeFile)\n            .build()) {\n\n        long startTime = System.nanoTime();\n\n        // Read 1000 random ranges\n        for (int i = 0; i &lt; 1000; i++) {\n            long offset = ThreadLocalRandom.current().nextLong(largeFile.toFile().length() - 1024);\n            reader.readRange(offset, 1024);\n        }\n\n        long endTime = System.nanoTime();\n        double durationMs = (endTime - startTime) / 1_000_000.0;\n\n        System.out.println(\"1000 reads took \" + durationMs + \"ms\");\n        assertTrue(durationMs &lt; 10000, \"Performance regression detected\");\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#base-test-classes","title":"Base Test Classes","text":""},{"location":"rangereader/developer-guide/testing/#abstractrangereaderit","title":"AbstractRangeReaderIT","text":"<p>All integration tests extend this base class to ensure consistent behavior:</p> <pre><code>public abstract class AbstractRangeReaderIT {\n    protected static final int TEST_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n\n    protected abstract RangeReader createBaseReader() throws IOException;\n\n    @Test\n    void testBasicRangeReading() throws IOException {\n        try (RangeReader reader = createBaseReader()) {\n            ByteBuffer data = reader.readRange(0, 1024);\n            assertEquals(1024, data.remaining());\n        }\n    }\n\n    @Test\n    void testBoundaryConditions() throws IOException {\n        try (RangeReader reader = createBaseReader()) {\n            long size = reader.size();\n\n            // Test reading at EOF\n            ByteBuffer data = reader.readRange(size - 10, 20);\n            assertEquals(10, data.remaining());\n\n            // Test reading beyond EOF\n            ByteBuffer empty = reader.readRange(size + 100, 1024);\n            assertEquals(0, empty.remaining());\n        }\n    }\n\n    // More common test cases...\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#testcontainers-integration","title":"TestContainers Integration","text":""},{"location":"rangereader/developer-guide/testing/#available-test-containers","title":"Available Test Containers","text":"Service Container Purpose S3 <code>localstack/localstack:3.2.0</code> AWS S3 API emulation MinIO <code>minio/minio:latest</code> S3-compatible storage Azure <code>mcr.microsoft.com/azure-storage/azurite:latest</code> Azure Blob Storage HTTP <code>nginx:alpine</code> HTTP server with authentication"},{"location":"rangereader/developer-guide/testing/#container-configuration-examples","title":"Container Configuration Examples","text":""},{"location":"rangereader/developer-guide/testing/#localstack-s3","title":"LocalStack (S3)","text":"<pre><code>@Container\nstatic LocalStackContainer localstack = new LocalStackContainer(\n        DockerImageName.parse(\"localstack/localstack:3.2.0\"))\n    .withServices(LocalStackContainer.Service.S3)\n    .withEnv(\"DEBUG\", \"1\");\n\n@BeforeAll\nstatic void setupS3() throws IOException {\n    S3Client s3Client = S3Client.builder()\n        .endpointOverride(localstack.getEndpoint())\n        .region(Region.of(localstack.getRegion()))\n        .credentialsProvider(StaticCredentialsProvider.create(\n            AwsBasicCredentials.create(\n                localstack.getAccessKey(), \n                localstack.getSecretKey())))\n        .build();\n\n    s3Client.createBucket(CreateBucketRequest.builder()\n        .bucket(\"test-bucket\")\n        .build());\n\n    // Upload test file\n    s3Client.putObject(\n        PutObjectRequest.builder()\n            .bucket(\"test-bucket\")\n            .key(\"test-file.bin\")\n            .build(),\n        RequestBody.fromFile(testFile));\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#minio","title":"MinIO","text":"<pre><code>@Container\nstatic MinIOContainer minio = new MinIOContainer(\"minio/minio:latest\");\n\n@BeforeAll\nstatic void setupMinIO() throws IOException {\n    S3Client s3Client = S3Client.builder()\n        .endpointOverride(URI.create(minio.getS3URL()))\n        .region(Region.US_EAST_1)\n        .credentialsProvider(StaticCredentialsProvider.create(\n            AwsBasicCredentials.create(\n                minio.getUserName(), \n                minio.getPassword())))\n        .forcePathStyle(true)\n        .build();\n\n    // Create bucket and upload test data\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#azurite-azure-blob-storage","title":"Azurite (Azure Blob Storage)","text":"<pre><code>@Container\nstatic GenericContainer&lt;?&gt; azurite = new GenericContainer&lt;&gt;(\"mcr.microsoft.com/azure-storage/azurite:latest\")\n    .withExposedPorts(10000)\n    .withCommand(\"azurite-blob\", \"--blobHost\", \"0.0.0.0\");\n\n@BeforeAll\nstatic void setupAzure() throws IOException {\n    String connectionString = String.format(\n        \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;\" +\n        \"AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;\" +\n        \"BlobEndpoint=http://%s:%d/devstoreaccount1;\",\n        azurite.getHost(), azurite.getMappedPort(10000));\n\n    BlobServiceClient blobClient = new BlobServiceClientBuilder()\n        .connectionString(connectionString)\n        .buildClient();\n\n    // Create container and upload test data\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#test-utilities","title":"Test Utilities","text":""},{"location":"rangereader/developer-guide/testing/#testutil-class","title":"TestUtil Class","text":"<p>Common utilities for creating test data:</p> <pre><code>public class TestUtil {\n\n    public static Path createTempTestFile(int sizeBytes) throws IOException {\n        Path testFile = Files.createTempFile(\"rangereader-test\", \".bin\");\n\n        // Create deterministic test data\n        byte[] data = new byte[sizeBytes];\n        Random random = new Random(42); // Fixed seed for reproducibility\n        random.nextBytes(data);\n\n        Files.write(testFile, data);\n        return testFile;\n    }\n\n    public static void verifyRangeContent(ByteBuffer actual, byte[] expected, \n                                         int offset, int length) {\n        assertEquals(length, actual.remaining());\n\n        for (int i = 0; i &lt; length; i++) {\n            assertEquals(expected[offset + i], actual.get(i),\n                \"Mismatch at position \" + i);\n        }\n    }\n\n    public static byte[] generateTestData(int size, long seed) {\n        byte[] data = new byte[size];\n        Random random = new Random(seed);\n        random.nextBytes(data);\n        return data;\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#test-data-management","title":"Test Data Management","text":""},{"location":"rangereader/developer-guide/testing/#consistent-test-data","title":"Consistent Test Data","text":"<p>All tests use the same deterministic test data:</p> <pre><code>public class AbstractRangeReaderIT {\n    protected static final int TEST_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    protected static final long TEST_DATA_SEED = 42L;\n\n    protected static byte[] createExpectedData() {\n        return TestUtil.generateTestData(TEST_FILE_SIZE, TEST_DATA_SEED);\n    }\n\n    @Test\n    void testRangeConsistency() throws IOException {\n        byte[] expectedData = createExpectedData();\n\n        try (RangeReader reader = createBaseReader()) {\n            // Test various ranges\n            verifyRange(reader, expectedData, 0, 1024);\n            verifyRange(reader, expectedData, 5000, 2048);\n            verifyRange(reader, expectedData, TEST_FILE_SIZE - 1000, 1000);\n        }\n    }\n\n    private void verifyRange(RangeReader reader, byte[] expected, \n                           int offset, int length) throws IOException {\n        ByteBuffer actual = reader.readRange(offset, length);\n        TestUtil.verifyRangeContent(actual, expected, offset, length);\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#benchmarks-with-jmh","title":"Benchmarks with JMH","text":""},{"location":"rangereader/developer-guide/testing/#running-benchmarks","title":"Running Benchmarks","text":"<pre><code># Build and run benchmarks (recommended)\nmake build-benchmarks  # Build benchmark JAR\nmake benchmarks        # Run all benchmarks\n\n# Specific benchmark types\nmake benchmarks-file   # Run file-based benchmarks only\nmake benchmarks-gc     # Run benchmarks with GC profiling\n\n# Build cloud benchmarks (requires TestContainers)\nmake benchmarks-cloud\n\n# Direct execution\njava -jar benchmarks/target/benchmarks.jar                    # All benchmarks\njava -jar benchmarks/target/benchmarks.jar FileRangeReader    # Specific benchmark\njava -jar benchmarks/target/benchmarks.jar -prof gc           # With profiling\njava -jar benchmarks/target/benchmarks.jar -f 3 -wi 5 -i 10   # Custom parameters\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#example-benchmark","title":"Example Benchmark","text":"<pre><code>@BenchmarkMode(Mode.Throughput)\n@OutputTimeUnit(TimeUnit.SECONDS)\n@State(Scope.Benchmark)\npublic class FileRangeReaderBenchmark {\n\n    private RangeReader reader;\n    private ByteBuffer buffer;\n\n    @Setup\n    public void setup() throws IOException {\n        Path testFile = TestUtil.createTempTestFile(100 * 1024 * 1024);\n        reader = FileRangeReader.builder()\n            .path(testFile)\n            .build();\n        buffer = ByteBuffer.allocate(64 * 1024);\n    }\n\n    @Benchmark\n    public int sequentialReads() throws IOException {\n        buffer.clear();\n        return reader.readRange(ThreadLocalRandom.current().nextLong(1024 * 1024), \n                               64 * 1024, buffer);\n    }\n\n    @TearDown\n    public void tearDown() throws IOException {\n        reader.close();\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"rangereader/developer-guide/testing/#test-organization","title":"Test Organization","text":"<pre><code>class CachingRangeReaderTest {\n\n    @Nested\n    @DisplayName(\"Basic Functionality\")\n    class BasicFunctionality {\n        @Test void testCacheHit() { }\n        @Test void testCacheMiss() { }\n    }\n\n    @Nested\n    @DisplayName(\"Configuration\")\n    class Configuration {\n        @Test void testMaximumSize() { }\n        @Test void testExpiration() { }\n    }\n\n    @Nested\n    @DisplayName(\"Error Handling\")\n    class ErrorHandling {\n        @Test void testDelegateFailure() { }\n        @Test void testInvalidParameters() { }\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#parameterized-tests","title":"Parameterized Tests","text":"<pre><code>@ParameterizedTest\n@ValueSource(ints = {100, 1000, 10000})\nvoid testVariousCacheSizes(int cacheSize) throws IOException {\n    try (var reader = CachingRangeReader.builder(baseReader)\n            .maximumSize(cacheSize)\n            .build()) {\n\n        ByteBuffer data = reader.readRange(100, 500);\n        assertEquals(500, data.remaining());\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#test-resource-management","title":"Test Resource Management","text":"<pre><code>@TempDir\nPath tempDir;\n\n@Test\nvoid testWithTempDirectory() throws IOException {\n    Path testFile = tempDir.resolve(\"test.bin\");\n    Files.write(testFile, \"test data\".getBytes());\n\n    try (var reader = FileRangeReader.builder()\n            .path(testFile)\n            .build()) {\n        // Test operations\n    }\n    // File automatically cleaned up by @TempDir\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"rangereader/developer-guide/testing/#github-actions-testing","title":"GitHub Actions Testing","text":"<p>The project runs comprehensive tests in CI using Makefile targets:</p> <pre><code># .github/workflows/pr-validation.yml\njobs:\n  build:\n    strategy:\n      matrix:\n        java-version: ['17', '21', '24']\n    steps:\n      - name: Run unit tests\n        run: make test-unit\n\n  integration-tests:\n    strategy:\n      matrix:\n        java-version: ['17', '21', '24']\n        test-group: ['core', 's3', 'azure', 'gcs']\n    steps:\n      - name: Run integration tests\n        run: make test-${{ matrix.test-group }}-it\n\n  quality:\n    steps:\n      - name: Check formatting\n        run: make lint\n      - name: Full verification\n        run: make verify\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#test-parallelization","title":"Test Parallelization","text":"<pre><code># TestContainers reuse for faster integration tests (recommended)\nexport TESTCONTAINERS_REUSE_ENABLE=true\nmake test-it\n\n# Module-specific integration tests with reuse\nexport TESTCONTAINERS_REUSE_ENABLE=true\nmake test-s3-it\n\n# Direct Maven commands for parallel execution\n./mvnw test -Dparallel=classes -DthreadCount=4  # Parallel unit tests\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"rangereader/developer-guide/testing/#test-logging","title":"Test Logging","text":"<pre><code>// Enable debug logging for tests\n@TestMethodOrder(OrderAnnotation.class)\nclass DebugTest {\n\n    @BeforeEach\n    void setupLogging() {\n        System.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"DEBUG\");\n        System.setProperty(\"org.slf4j.simpleLogger.log.io.tileverse.rangereader\", \"TRACE\");\n    }\n}\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#ide-test-configuration","title":"IDE Test Configuration","text":""},{"location":"rangereader/developer-guide/testing/#intellij-idea","title":"IntelliJ IDEA","text":"<pre><code>Run Configuration:\n- Working directory: $MODULE_WORKING_DIR$\n- VM options: -ea -Dtestcontainers.reuse.enable=true\n- Environment variables: TESTCONTAINERS_REUSE_ENABLE=true\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#eclipse","title":"Eclipse","text":"<pre><code>Run Configuration:\n- Arguments tab \u2192 VM arguments: -ea\n- Environment tab \u2192 Add: TESTCONTAINERS_REUSE_ENABLE=true\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"rangereader/developer-guide/testing/#measuring-coverage","title":"Measuring Coverage","text":"<pre><code># Generate coverage report\n./mvnw test jacoco:report\n\n# View coverage report\nopen target/site/jacoco/index.html\n</code></pre>"},{"location":"rangereader/developer-guide/testing/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>Line Coverage: &gt; 85%</li> <li>Branch Coverage: &gt; 80%</li> <li>Method Coverage: &gt; 90%</li> </ul>"},{"location":"rangereader/developer-guide/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Performance: Learn about performance testing and optimization</li> <li>Contributing: Guidelines for contributing tests</li> <li>Building: Build system and test execution</li> </ul>"},{"location":"rangereader/user-guide/","title":"User Guide","text":"<p>Welcome to the Tileverse Range Reader User Guide! This section provides comprehensive guidance for developers who want to integrate the library into their applications.</p>"},{"location":"rangereader/user-guide/#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers everything you need to know to effectively use the Tileverse Range Reader library:</p> <ul> <li>Installation: How to add the library to your project</li> <li>Quick Start: Get up and running with basic examples</li> <li>Configuration: Advanced configuration options for optimal performance</li> <li>Authentication: Setting up authentication for cloud providers and HTTP sources</li> <li>Troubleshooting: Common issues and their solutions</li> </ul>"},{"location":"rangereader/user-guide/#real-world-use-cases","title":"Real-World Use Cases","text":"<p>The Tileverse Range Reader library addresses critical needs in modern geospatial and data processing applications:</p>"},{"location":"rangereader/user-guide/#geospatial-data-processing","title":"\ud83c\udf0d Geospatial Data Processing","text":"<ul> <li>Cloud Optimized GeoTIFF (COG) reading for satellite imagery analysis</li> <li>PMTiles serving for high-performance web mapping</li> <li>GeoParquet processing for large-scale vector analytics</li> <li>Zarr access for multi-dimensional geospatial datasets</li> <li>FlatGeobuf streaming for efficient vector data queries</li> </ul>"},{"location":"rangereader/user-guide/#enterprise-applications","title":"\ud83c\udfe2 Enterprise Applications","text":"<ul> <li>Server-side tile rendering without downloading entire datasets</li> <li>Microservices architecture with cloud-native data access</li> <li>Data pipelines that process specific portions of large files</li> <li>Analytics platforms performing random access on cloud-stored data</li> </ul>"},{"location":"rangereader/user-guide/#performance-critical-systems","title":"\ud83d\ude80 Performance-Critical Systems","text":"<ul> <li>Real-time mapping applications requiring sub-second response times</li> <li>Large-scale batch processing with optimized I/O patterns</li> <li>Mobile and embedded systems with bandwidth constraints</li> <li>Multi-tenant platforms with shared caching strategies</li> </ul>"},{"location":"rangereader/user-guide/#target-audience","title":"Target Audience","text":"<p>This guide is designed for:</p> <ul> <li>Java Developers building geospatial or data processing applications</li> <li>Application Architects designing cloud-native data access systems</li> <li>DevOps Engineers deploying and optimizing data-intensive applications</li> <li>Performance Engineers optimizing I/O patterns and caching strategies</li> <li>Library Authors building format readers on a common foundation</li> </ul>"},{"location":"rangereader/user-guide/#prerequisites","title":"Prerequisites","text":"<p>Before using this library, you should have:</p> <ul> <li>Java 17+ installed and configured</li> <li>Maven 3.9+ for dependency management</li> <li>Basic familiarity with Java NIO and ByteBuffer operations</li> <li>Understanding of your target data sources (local files, HTTP, cloud storage)</li> </ul>"},{"location":"rangereader/user-guide/#getting-started-quickly","title":"Getting Started Quickly","text":"<p>If you're in a hurry, start with these essentials:</p> <ol> <li>Installation - Add the library to your project</li> <li>Quick Start - Basic usage examples</li> <li>Configuration - Performance optimization</li> </ol>"},{"location":"rangereader/user-guide/#library-overview","title":"Library Overview","text":"<p>The Tileverse Range Reader provides a unified interface for reading byte ranges from various sources:</p> <pre><code>// The core interface - same for all data sources\npublic interface RangeReader extends Closeable {\n    ByteBuffer readRange(long offset, int length) throws IOException;\n    int readRange(long offset, int length, ByteBuffer target) throws IOException;\n    long size() throws IOException;\n    String getSourceIdentifier();\n}\n</code></pre>"},{"location":"rangereader/user-guide/#supported-data-sources","title":"Supported Data Sources","text":"Data Source Module Authentication Local Files <code>core</code> File system permissions HTTP/HTTPS <code>core</code> Basic, Bearer, API Key, Digest, Custom Amazon S3 <code>s3</code> AWS credentials, IAM roles Azure Blob Storage <code>azure</code> Connection strings, SAS tokens, Azure AD Google Cloud Storage <code>gcs</code> Service accounts, ADC"},{"location":"rangereader/user-guide/#performance-features","title":"Performance Features","text":"<p>The library includes several performance optimization features:</p> <ul> <li>Memory Caching: Fast access to recently used ranges</li> <li>Disk Caching: Persistent caching for large datasets</li> <li>Block Alignment: Optimized read patterns for cloud storage</li> <li>Concurrent Access: Thread-safe implementations</li> </ul>"},{"location":"rangereader/user-guide/#common-use-cases","title":"Common Use Cases","text":""},{"location":"rangereader/user-guide/#pmtiles-and-tiled-data","title":"PMTiles and Tiled Data","text":"<p>Perfect for accessing tile data without loading entire files:</p> <pre><code>// Read PMTiles header\nByteBuffer header = reader.readRange(0, 127);\nheader.flip();\n\n// Read specific tiles based on tile index\nByteBuffer tileData = reader.readRange(tileOffset, tileLength);\ntileData.flip();\n</code></pre>"},{"location":"rangereader/user-guide/#large-file-processing","title":"Large File Processing","text":"<p>Process large files in chunks:</p> <pre><code>long fileSize = reader.size();\nint chunkSize = 1024 * 1024; // 1MB chunks\n\nfor (long offset = 0; offset &lt; fileSize; offset += chunkSize) {\n    int length = (int) Math.min(chunkSize, fileSize - offset);\n    ByteBuffer chunk = reader.readRange(offset, length);\n    chunk.flip();\n    // Process chunk\n}\n</code></pre>"},{"location":"rangereader/user-guide/#cloud-data-analysis","title":"Cloud Data Analysis","text":"<p>Efficiently access cloud-stored datasets:</p> <pre><code>// Read dataset metadata\nByteBuffer metadata = reader.readRange(0, 1024);\nmetadata.flip();\n\n// Read specific data sections\nByteBuffer section1 = reader.readRange(metadataSize, sectionLength);\nsection1.flip();\nByteBuffer section2 = reader.readRange(section1Offset, section1Length);\nsection2.flip();\n</code></pre>"},{"location":"rangereader/user-guide/#performance-considerations","title":"Performance Considerations","text":""},{"location":"rangereader/user-guide/#decorator-stacking-order","title":"Decorator Stacking Order","text":"<p>For optimal performance, stack decorators in this order:</p> <pre><code>Application\n    \u2193\nCachingRangeReader (memory cache - outermost)\n    \u2193  \nDiskCachingRangeReader (persistent cache)\n    \u2193\nBaseReader (S3, Azure, HTTP, etc.)\n    \u2193\nData Source\n</code></pre>"},{"location":"rangereader/user-guide/#read-pattern-guidelines","title":"Read Pattern Guidelines","text":"Data Source Recommended Strategy Rationale Local Files Direct access OS already provides efficient file caching HTTP Chunked reading (256 KB - 1 MB) Reduce request overhead S3 Large chunks (1 MB - 8 MB) Minimize API calls, optimize for S3's performance characteristics Azure Blob Large chunks (1 MB - 4 MB) Balance throughput and latency Google Cloud Large chunks (1 MB - 8 MB) Optimize for GCS performance"},{"location":"rangereader/user-guide/#memory-management","title":"Memory Management","text":"<p>Configure caching based on your available memory:</p> <pre><code>// For memory-constrained environments\nCachingRangeReader.builder(delegate)\n    .maximumSize(100)  // Limit number of cached ranges\n    .softValues()      // Allow GC to reclaim memory\n    .build()\n\n// For memory-rich environments  \nCachingRangeReader.builder(delegate)\n    .maxSizeBytes(512 * 1024 * 1024)  // 512MB cache\n    .expireAfterAccess(30, TimeUnit.MINUTES)\n    .build()\n</code></pre>"},{"location":"rangereader/user-guide/#next-steps","title":"Next Steps","text":"<p>Ready to get started? Choose your path:</p> <ul> <li> <p> Installation</p> <p>Add the library to your Maven project</p> <p> Install</p> </li> <li> <p> Quick Start</p> <p>Basic examples for each data source</p> <p> Examples</p> </li> <li> <p> Configuration</p> <p>Optimize performance for your use case</p> <p> Configure</p> </li> <li> <p> Authentication</p> <p>Set up secure access to your data</p> <p> Auth Setup</p> </li> </ul>"},{"location":"rangereader/user-guide/#need-help","title":"Need Help?","text":"<ul> <li>Check the Troubleshooting guide for common issues</li> <li>Review the Quick Start for code examples</li> <li>Read the Configuration guide for advanced setup</li> <li>Visit our GitHub repository for the latest updates</li> </ul>"},{"location":"rangereader/user-guide/authentication/","title":"Authentication","text":"<p>Configure secure authentication for cloud storage providers and HTTP sources.</p>"},{"location":"rangereader/user-guide/authentication/#http-authentication","title":"HTTP Authentication","text":"<p>The library supports multiple HTTP authentication methods through the <code>HttpRangeReader</code>.</p>"},{"location":"rangereader/user-guide/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>Username and password authentication:</p> <p>Programmatic: <pre><code>var reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://secure.example.com/data.bin\"))\n    .basicAuth(\"username\", \"password\")\n    .build();\n</code></pre></p> <p>Property-based: <pre><code>Properties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.username\", \"username\");\nprops.setProperty(\"io.tileverse.rangereader.http.password\", \"password\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://secure.example.com/data.bin\"),\n    props);\n</code></pre></p>"},{"location":"rangereader/user-guide/authentication/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<p>JWT or other bearer tokens:</p> <p>Programmatic: <pre><code>var reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .bearerToken(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\")\n    .build();\n</code></pre></p> <p>Property-based: <pre><code>Properties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.bearer-token\",\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n</code></pre></p>"},{"location":"rangereader/user-guide/authentication/#api-key-authentication","title":"API Key Authentication","text":"<p>Custom API key headers:</p> <p>Programmatic: <pre><code>// Without prefix\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .apiKey(\"X-API-Key\", \"your-api-key-here\", null)\n    .build();\n\n// With prefix (e.g., \"ApiKey abc123\")\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .apiKey(\"Authorization\", \"your-api-key\", \"ApiKey \")\n    .build();\n</code></pre></p> <p>Property-based: <pre><code>// Without prefix\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-headername\", \"X-API-Key\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key\", \"your-api-key-here\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n\n// With prefix\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-headername\", \"Authorization\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key\", \"your-api-key\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-value-prefix\", \"ApiKey \");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n</code></pre></p>"},{"location":"rangereader/user-guide/authentication/#amazon-s3-authentication","title":"Amazon S3 Authentication","text":"<p>S3 authentication uses the AWS SDK credential chain.</p>"},{"location":"rangereader/user-guide/authentication/#default-credential-chain","title":"Default Credential Chain","text":"<p>The library automatically discovers credentials in this order:</p> <ol> <li>Environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>)</li> <li>Java system properties (<code>aws.accessKeyId</code>, <code>aws.secretAccessKey</code>)</li> <li>Web Identity Token from AWS STS</li> <li>Shared credential files (<code>~/.aws/credentials</code>)</li> <li>Amazon ECS container credentials</li> <li>Amazon EC2 instance profile credentials</li> </ol> <pre><code>// Uses default credential chain\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/data.bin\"))\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#environment-variables","title":"Environment Variables","text":"<pre><code>export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#aws-credentials-file","title":"AWS Credentials File","text":"<p>Create <code>~/.aws/credentials</code>:</p> <pre><code>[default]\naws_access_key_id = AKIAIOSFODNN7EXAMPLE\naws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n\n[production]\naws_access_key_id = AKIAI44QH8DHBEXAMPLE\naws_secret_access_key = je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\n</code></pre> <p>Create <code>~/.aws/config</code>:</p> <pre><code>[default]\nregion = us-west-2\n\n[profile production]\nregion = us-east-1\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#programmatic-credentials","title":"Programmatic Credentials","text":"<pre><code>// Static credentials (not recommended for production)\nvar credentialsProvider = StaticCredentialsProvider.create(\n    AwsBasicCredentials.create(\"access-key\", \"secret-key\"));\n\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .credentialsProvider(credentialsProvider)\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#profile-based-credentials","title":"Profile-Based Credentials","text":"<pre><code>// Use specific profile\nvar credentialsProvider = ProfileCredentialsProvider.create(\"production\");\n\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .credentialsProvider(credentialsProvider)\n    .region(Region.US_EAST_1)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#iam-roles-recommended","title":"IAM Roles (Recommended)","text":"<p>For applications running on AWS:</p> <pre><code>// Automatically uses EC2 instance profile or ECS task role\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#sts-assume-role","title":"STS Assume Role","text":"<pre><code>var stsClient = StsClient.builder()\n    .region(Region.US_WEST_2)\n    .build();\n\nvar credentialsProvider = StsAssumeRoleCredentialsProvider.builder()\n    .stsClient(stsClient)\n    .refreshRequest(AssumeRoleRequest.builder()\n        .roleArn(\"arn:aws:iam::123456789012:role/S3AccessRole\")\n        .roleSessionName(\"rangereader-session\")\n        .build())\n    .build();\n\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .credentialsProvider(credentialsProvider)\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#azure-blob-storage-authentication","title":"Azure Blob Storage Authentication","text":"<p>Azure supports multiple authentication methods.</p>"},{"location":"rangereader/user-guide/authentication/#connection-string-simplest","title":"Connection String (Simplest)","text":"<pre><code>var connectionString = \"DefaultEndpointsProtocol=https;\" +\n    \"AccountName=mystorageaccount;\" +\n    \"AccountKey=StorageAccountKeyEndingIn==;\" +\n    \"EndpointSuffix=core.windows.net\";\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://mystorageaccount.blob.core.windows.net/container/blob\"))\n    .connectionString(connectionString)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#account-key","title":"Account Key","text":"<pre><code>var credential = new StorageSharedKeyCredential(\"accountname\", \"accountkey\");\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://accountname.blob.core.windows.net/container/blob\"))\n    .credential(credential)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#sas-token-recommended","title":"SAS Token (Recommended)","text":"<pre><code>var sasToken = \"sv=2020-08-04&amp;ss=b&amp;srt=sco&amp;sp=r&amp;se=2023-12-31T23:59:59Z&amp;st=2023-01-01T00:00:00Z&amp;spr=https&amp;sig=signature\";\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .sasToken(sasToken)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#azure-ad-authentication","title":"Azure AD Authentication","text":"<pre><code>// Default Azure credential chain\nvar credential = new DefaultAzureCredentialBuilder().build();\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .credential(credential)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#service-principal","title":"Service Principal","text":"<pre><code>var credential = new ClientSecretCredentialBuilder()\n    .clientId(\"client-id\")\n    .clientSecret(\"client-secret\")\n    .tenantId(\"tenant-id\")\n    .build();\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .credential(credential)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#managed-identity","title":"Managed Identity","text":"<p>For applications running on Azure:</p> <pre><code>var credential = new ManagedIdentityCredentialBuilder()\n    .clientId(\"user-assigned-identity-client-id\")  // Optional for user-assigned\n    .build();\n\nvar reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .credential(credential)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#google-cloud-storage-authentication","title":"Google Cloud Storage Authentication","text":"<p>GCS uses service accounts and Application Default Credentials.</p>"},{"location":"rangereader/user-guide/authentication/#application-default-credentials-adc","title":"Application Default Credentials (ADC)","text":"<p>Automatically discovers credentials in this order:</p> <ol> <li><code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable</li> <li>gcloud user credentials</li> <li>Google Cloud SDK default credentials</li> <li>Google Compute Engine service account</li> </ol> <pre><code>// Uses ADC\nvar reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://my-bucket/object\"))\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#service-account-key-file","title":"Service Account Key File","text":"<pre><code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/service-account.json\"\n</code></pre> <pre><code>var reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#programmatic-service-account","title":"Programmatic Service Account","text":"<pre><code>var credentials = ServiceAccountCredentials.fromStream(\n    new FileInputStream(\"/path/to/service-account.json\"));\n\nvar reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .credentials(credentials)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#service-account-from-json","title":"Service Account from JSON","text":"<pre><code>var credentialsJson = \"\"\"\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"my-project\",\n  \"private_key_id\": \"key-id\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\\\n...\\\\n-----END PRIVATE KEY-----\\\\n\",\n  \"client_email\": \"service-account@my-project.iam.gserviceaccount.com\",\n  \"client_id\": \"123456789\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\"\n}\n\"\"\";\n\nvar credentials = ServiceAccountCredentials.fromStream(\n    new ByteArrayInputStream(credentialsJson.getBytes()));\n\nvar reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .credentials(credentials)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#compute-engine-service-account","title":"Compute Engine Service Account","text":"<p>For applications running on Google Compute Engine:</p> <pre><code>var credentials = ComputeEngineCredentials.create();\n\nvar reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .credentials(credentials)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"rangereader/user-guide/authentication/#credential-storage","title":"Credential Storage","text":"<ul> <li>Never hardcode credentials in source code</li> <li>Use environment variables for development</li> <li>Use managed identities in cloud environments</li> <li>Rotate credentials regularly</li> <li>Use least privilege access policies</li> </ul>"},{"location":"rangereader/user-guide/authentication/#network-security","title":"Network Security","text":"<pre><code>// Enable SSL/TLS verification\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://secure.example.com/data.bin\"))\n    .verifySSL(true)  // Default is true\n    .build();\n\n// For development with self-signed certificates (not recommended for production)\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://dev.example.com/data.bin\"))\n    .trustAllCertificates(true)  // Only for development\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#access-control","title":"Access Control","text":""},{"location":"rangereader/user-guide/authentication/#s3-bucket-policy-example","title":"S3 Bucket Policy Example","text":"<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::ACCOUNT:user/rangereader-user\"\n      },\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:GetObjectRange\"\n      ],\n      \"Resource\": \"arn:aws:s3:::my-bucket/*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#azure-blob-storage-access-policy","title":"Azure Blob Storage Access Policy","text":"<pre><code>{\n  \"Version\": \"2020-08-04\",\n  \"SignedPermissions\": \"r\",\n  \"SignedResource\": \"b\",\n  \"SignedExpiry\": \"2024-12-31T23:59:59Z\"\n}\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#troubleshooting-authentication","title":"Troubleshooting Authentication","text":""},{"location":"rangereader/user-guide/authentication/#common-issues","title":"Common Issues","text":"<p>AWS S3 Access Denied: <pre><code>Exception: Access Denied (Service: S3, Status Code: 403)\n</code></pre> - Check IAM permissions - Verify bucket policy - Ensure correct region</p> <p>Azure Blob Storage Authentication Failed: <pre><code>Exception: AuthenticationFailed (Status Code: 403)\n</code></pre> - Verify connection string or SAS token - Check token expiration - Ensure correct storage account</p> <p>Google Cloud Storage Forbidden: <pre><code>Exception: 403 Forbidden\n</code></pre> - Check service account permissions - Verify <code>GOOGLE_APPLICATION_CREDENTIALS</code> - Ensure correct project ID</p>"},{"location":"rangereader/user-guide/authentication/#debugging-authentication","title":"Debugging Authentication","text":"<pre><code>// Enable debug logging\nSystem.setProperty(\"org.slf4j.simpleLogger.log.software.amazon.awssdk\", \"DEBUG\");\nSystem.setProperty(\"org.slf4j.simpleLogger.log.com.azure\", \"DEBUG\");\nSystem.setProperty(\"org.slf4j.simpleLogger.log.com.google.cloud\", \"DEBUG\");\n\n// Test authentication separately\ntry {\n    var reader = S3RangeReader.builder()\n        .uri(URI.create(\"s3://bucket/key\"))\n        .build();\n\n    long size = reader.size();  // This will test authentication\n    System.out.println(\"Authentication successful, file size: \" + size);\n} catch (Exception e) {\n    System.err.println(\"Authentication failed: \" + e.getMessage());\n}\n</code></pre>"},{"location":"rangereader/user-guide/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting: Common authentication issues</li> <li>Configuration: Advanced configuration options</li> <li>Quick Start: Usage examples with authentication</li> </ul>"},{"location":"rangereader/user-guide/configuration/","title":"Configuration","text":"<p>Optimize the Tileverse Range Reader for your specific use case with proper configuration.</p>"},{"location":"rangereader/user-guide/configuration/#dependency-management","title":"Dependency Management","text":""},{"location":"rangereader/user-guide/configuration/#using-boms-recommended","title":"Using BOMs (Recommended)","text":"<p>The Tileverse provides Bills of Materials (BOMs) to simplify dependency management:</p>"},{"location":"rangereader/user-guide/configuration/#tileverse-bom","title":"TileVerse BOM","text":"<p>Use this BOM in your application to manage Range Reader module versions:</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-bom&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n\n&lt;dependencies&gt;\n    &lt;!-- Versions managed by the BOM --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n        &lt;artifactId&gt;tileverse-rangereader-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n        &lt;artifactId&gt;tileverse-rangereader-s3&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#dependencies-bom-for-library-developers","title":"Dependencies BOM (For Library Developers)","text":"<p>If you're developing libraries that extend Range Reader or need specific third-party dependency versions:</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;!-- Import TileVerse dependencies BOM first --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Then import TileVerse modules BOM --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-bom&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <p>This approach ensures: - Consistent dependency versions across all modules - Reduced version conflicts and dependency hell - Simplified dependency declaration (no version numbers needed) - Easier upgrades (change only the BOM version)</p>"},{"location":"rangereader/user-guide/configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"rangereader/user-guide/configuration/#caching-strategies","title":"Caching Strategies","text":""},{"location":"rangereader/user-guide/configuration/#memory-caching","title":"Memory Caching","text":"<p>Configure in-memory caching for frequently accessed ranges:</p> <pre><code>// Entry-based sizing\nvar reader = CachingRangeReader.builder(delegate)\n    .maximumSize(1000)  // Limit number of cached ranges\n    .build();\n\n// Memory-based sizing\nvar reader = CachingRangeReader.builder(delegate)\n    .maxSizeBytes(64 * 1024 * 1024)  // 64MB memory limit\n    .build();\n\n// Time-based expiration\nvar reader = CachingRangeReader.builder(delegate)\n    .maximumSize(500)\n    .expireAfterAccess(30, TimeUnit.MINUTES)\n    .build();\n\n// Adaptive sizing (uses soft references)\nvar reader = CachingRangeReader.builder(delegate)\n    .softValues()  // Let GC manage memory pressure\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#disk-caching","title":"Disk Caching","text":"<p>Configure persistent disk caching for large datasets:</p> <pre><code>// Basic disk caching\nvar reader = DiskCachingRangeReader.builder(delegate)\n    .cacheDirectory(\"/tmp/rangereader-cache\")\n    .maxCacheSizeBytes(10L * 1024 * 1024 * 1024)  // 10GB\n    .build();\n\n// Temporary caching (deleted on close)\nvar reader = DiskCachingRangeReader.builder(delegate)\n    .cacheDirectory(\"/tmp/temp-cache\")\n    .deleteOnClose()\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#read-optimization","title":"Read Optimization","text":"<p>Optimize read patterns for your specific use case:</p> <pre><code>// For random access patterns, use memory caching\nvar reader = CachingRangeReader.builder(delegate)\n    .maximumSize(1000)  // Cache frequently accessed ranges\n    .build();\n\n// For large sequential reads, use disk caching\nvar reader = DiskCachingRangeReader.builder(delegate)\n    .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB disk cache\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#cloud-provider-configuration","title":"Cloud Provider Configuration","text":""},{"location":"rangereader/user-guide/configuration/#amazon-s3","title":"Amazon S3","text":""},{"location":"rangereader/user-guide/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>var reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#advanced-s3-configuration","title":"Advanced S3 Configuration","text":"<pre><code>// Custom S3 client configuration\nvar s3Client = S3Client.builder()\n    .region(Region.US_WEST_2)\n    .credentialsProvider(ProfileCredentialsProvider.create())\n    .overrideConfiguration(ClientOverrideConfiguration.builder()\n        .apiCallTimeout(Duration.ofSeconds(30))\n        .apiCallAttemptTimeout(Duration.ofSeconds(10))\n        .retryPolicy(RetryPolicy.builder()\n            .numRetries(3)\n            .build())\n        .build())\n    .build();\n\nvar reader = S3RangeReader.builder()\n    .client(s3Client)\n    .bucket(\"my-bucket\")\n    .key(\"path/to/object\")\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#s3-compatible-storage","title":"S3-Compatible Storage","text":"<pre><code>// MinIO or other S3-compatible services\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .endpoint(URI.create(\"http://localhost:9000\"))\n    .region(Region.US_EAST_1)\n    .forcePathStyle()  // Required for MinIO\n    .credentialsProvider(StaticCredentialsProvider.create(\n        AwsBasicCredentials.create(\"minioadmin\", \"minioadmin\")))\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#azure-blob-storage","title":"Azure Blob Storage","text":""},{"location":"rangereader/user-guide/configuration/#connection-string-configuration","title":"Connection String Configuration","text":"<pre><code>var reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .connectionString(\"DefaultEndpointsProtocol=https;AccountName=account;...\")\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#sas-token-configuration","title":"SAS Token Configuration","text":"<pre><code>var reader = AzureBlobRangeReader.builder()\n    .uri(URI.create(\"https://account.blob.core.windows.net/container/blob\"))\n    .sasToken(\"sv=2020-08-04&amp;ss=b&amp;srt=sco&amp;sp=r&amp;se=...\")\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#google-cloud-storage","title":"Google Cloud Storage","text":""},{"location":"rangereader/user-guide/configuration/#default-credentials","title":"Default Credentials","text":"<pre><code>var reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .build();  // Uses Application Default Credentials\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#service-account","title":"Service Account","text":"<pre><code>var credentials = ServiceAccountCredentials.fromStream(\n    new FileInputStream(\"service-account.json\"));\n\nvar reader = GoogleCloudStorageRangeReader.builder()\n    .uri(URI.create(\"gs://bucket/object\"))\n    .credentials(credentials)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#http-configuration","title":"HTTP Configuration","text":""},{"location":"rangereader/user-guide/configuration/#basic-http","title":"Basic HTTP","text":"<pre><code>var reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://example.com/data.bin\"))\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#http-with-authentication","title":"HTTP with Authentication","text":""},{"location":"rangereader/user-guide/configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>Using the builder API directly:</p> <pre><code>// Basic authentication\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://example.com/data.bin\"))\n    .basicAuth(\"username\", \"password\")\n    .build();\n\n// Bearer token\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .bearerToken(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\")\n    .build();\n\n// API key\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .apiKey(\"X-API-Key\", \"your-api-key\", null)\n    .build();\n\n// API key with prefix\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://api.example.com/data.bin\"))\n    .apiKey(\"Authorization\", \"your-api-key\", \"ApiKey \")\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#property-based-configuration","title":"Property-Based Configuration","text":"<p>Using <code>RangeReaderFactory</code> with properties for declarative configuration:</p> <pre><code>// Basic authentication\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.username\", \"username\");\nprops.setProperty(\"io.tileverse.rangereader.http.password\", \"password\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://example.com/data.bin\"),\n    props);\n\n// Bearer token authentication\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.bearer-token\",\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n\n// API key authentication\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-headername\", \"X-API-Key\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key\", \"your-api-key-here\");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n\n// API key with prefix\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-headername\", \"Authorization\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key\", \"your-api-key\");\nprops.setProperty(\"io.tileverse.rangereader.http.api-key-value-prefix\", \"ApiKey \");\n\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://api.example.com/data.bin\"),\n    props);\n</code></pre> <p>Available HTTP Configuration Parameters:</p> Parameter Key Type Description <code>io.tileverse.rangereader.http.timeout-millis</code> Integer Connection timeout in milliseconds (default: 5000) <code>io.tileverse.rangereader.http.trust-all-certificates</code> Boolean Trust all SSL certificates, including self-signed (dev only) <code>io.tileverse.rangereader.http.username</code> String Username for HTTP Basic Authentication <code>io.tileverse.rangereader.http.password</code> String Password for HTTP Basic Authentication <code>io.tileverse.rangereader.http.bearer-token</code> String Bearer token for OAuth 2.0/JWT authentication <code>io.tileverse.rangereader.http.api-key-headername</code> String HTTP header name for API key (e.g., \"X-API-Key\") <code>io.tileverse.rangereader.http.api-key</code> String API key value <code>io.tileverse.rangereader.http.api-key-value-prefix</code> String Optional prefix for API key value (e.g., \"ApiKey \")"},{"location":"rangereader/user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>HTTP configuration can also be provided via environment variables (useful for containerized deployments):</p> <pre><code># Connection settings\nexport IO_TILEVERSE_RANGEREADER_HTTP_TIMEOUT_MILLIS=10000\nexport IO_TILEVERSE_RANGEREADER_HTTP_TRUST_ALL_CERTIFICATES=false\n\n# Basic authentication\nexport IO_TILEVERSE_RANGEREADER_HTTP_USERNAME=myuser\nexport IO_TILEVERSE_RANGEREADER_HTTP_PASSWORD=mypassword\n\n# Bearer token authentication\nexport IO_TILEVERSE_RANGEREADER_HTTP_BEARER_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\n# API key authentication\nexport IO_TILEVERSE_RANGEREADER_HTTP_API_KEY_HEADERNAME=X-API-Key\nexport IO_TILEVERSE_RANGEREADER_HTTP_API_KEY=abc123xyz\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#http-client-tuning","title":"HTTP Client Tuning","text":"<pre><code>// For high-throughput scenarios\nvar reader = HttpRangeReader.builder()\n    .uri(URI.create(\"https://example.com/data.bin\"))\n    .connectionTimeout(Duration.ofSeconds(10))\n    .build();\n\n// Property-based configuration\nProperties props = new Properties();\nprops.setProperty(\"io.tileverse.rangereader.http.timeout-millis\", \"10000\");\nvar reader = RangeReaderFactory.create(\n    URI.create(\"https://example.com/data.bin\"),\n    props);\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#optimal-configurations-by-use-case","title":"Optimal Configurations by Use Case","text":""},{"location":"rangereader/user-guide/configuration/#high-frequency-random-access","title":"High-Frequency Random Access","text":"<p>Optimize for applications that make many small, random reads:</p> <pre><code>// \u2705 CORRECT: Optimize cloud storage for high-frequency random access\nvar reader = CachingRangeReader.builder(\n    S3RangeReader.builder()\n        .uri(URI.create(\"s3://bucket/data.bin\"))\n        .region(Region.US_WEST_2)\n        .build())\n    .maximumSize(2000)  // Large memory cache\n    .expireAfterAccess(1, TimeUnit.HOURS)\n    .build();\n</code></pre> <p>Note: Local files don't benefit from caching since the OS already provides efficient file caching.</p>"},{"location":"rangereader/user-guide/configuration/#large-sequential-reads","title":"Large Sequential Reads","text":"<p>Optimize for applications that read large chunks sequentially:</p> <pre><code>// \u2705 CORRECT: Optimize HTTP for large sequential reads\nvar reader = DiskCachingRangeReader.builder(\n    HttpRangeReader.builder()\n        .uri(URI.create(\"https://cdn.example.com/large-dataset.bin\"))\n        .withBearerToken(authToken)\n        .build())\n    .maxCacheSizeBytes(5L * 1024 * 1024 * 1024)  // 5GB disk cache\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#cloud-storage-with-resilience","title":"Cloud Storage with Resilience","text":"<p>Optimize for cloud storage with network resilience:</p> <pre><code>// \u2705 CORRECT: Multi-level caching with proper decorator order\nvar reader = CachingRangeReader.builder(\n    DiskCachingRangeReader.builder(\n        S3RangeReader.builder()\n            .uri(s3Uri)\n            .region(region)\n            .build())\n        .maxCacheSizeBytes(20L * 1024 * 1024 * 1024)  // 20GB persistent cache\n        .build())\n    .maximumSize(1000)  // Memory cache entries\n    .expireAfterAccess(2, TimeUnit.HOURS)\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#memory-constrained-environments","title":"Memory-Constrained Environments","text":"<p>Optimize for environments with limited memory:</p> <pre><code>// \u2705 CORRECT: Memory-constrained cloud storage optimization\nvar reader = CachingRangeReader.builder(\n    DiskCachingRangeReader.builder(\n        AzureBlobRangeReader.builder()\n            .uri(URI.create(\"https://account.blob.core.windows.net/container/data.bin\"))\n            .sasToken(sasToken)\n            .build())\n        .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB disk cache\n        .deleteOnClose()  // Clean up cache\n        .build())\n    .maximumSize(50)  // Small memory cache\n    .softValues()     // Allow GC to reclaim memory\n    .build();\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#configuration-guidelines","title":"Configuration Guidelines","text":""},{"location":"rangereader/user-guide/configuration/#read-strategy-selection","title":"Read Strategy Selection","text":"Data Source Recommended Strategy Rationale Local Files Direct reads OS caching is already optimal HTTP Chunked reads (256KB - 1MB) Reduce request overhead S3 Large reads (1MB - 8MB) Minimize API calls Azure Blob Large reads (1MB - 4MB) Optimize for Azure's performance Google Cloud Large reads (1MB - 8MB) Balance throughput and latency"},{"location":"rangereader/user-guide/configuration/#cache-size-guidelines","title":"Cache Size Guidelines","text":"Use Case Memory Cache Disk Cache Interactive Applications 50-200 entries 1-5GB Batch Processing 10-50 entries 10-50GB Server Applications 500-2000 entries 5-20GB Mobile/Embedded 10-50 entries 100MB-1GB"},{"location":"rangereader/user-guide/configuration/#critical-decorator-stacking-order","title":"\u26a0\ufe0f CRITICAL: Decorator Stacking Order","text":"<p>CachingRangeReader should wrap DiskCachingRangeReader for optimal performance!</p> <pre><code>Application\n    \u2193\nCachingRangeReader (memory - fast access)\n    \u2193\nDiskCachingRangeReader (persistent storage)\n    \u2193\nBaseReader (source-specific)\n    \u2193\nData Source\n</code></pre> <p>Why this order matters: - Fast access: Memory cache provides immediate results for recently accessed ranges - Persistence: Disk cache survives application restarts - Optimal fallback: Missing memory cache entries can be served from disk cache</p>"},{"location":"rangereader/user-guide/configuration/#monitoring-and-diagnostics","title":"Monitoring and Diagnostics","text":""},{"location":"rangereader/user-guide/configuration/#cache-statistics","title":"Cache Statistics","text":"<pre><code>if (reader instanceof CachingRangeReader cachingReader) {\n    var stats = cachingReader.getCacheStats();\n    System.out.println(\"Hit rate: \" + stats.hitRate());\n    System.out.println(\"Cache size: \" + stats.estimatedSize());\n    System.out.println(\"Eviction count: \" + stats.evictionCount());\n}\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#source-identification","title":"Source Identification","text":"<pre><code>// Useful for debugging and logging\nString sourceId = reader.getSourceIdentifier();\nSystem.out.println(\"Reading from: \" + sourceId);\n// Output examples:\n// \"file:///path/to/file.bin\"\n// \"memory-cached:disk-cached:block-aligned:s3://bucket/key\"\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#environment-variables_1","title":"Environment Variables","text":"<p>Set these environment variables for global configuration:</p> <pre><code># AWS credentials (for S3)\nexport AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_REGION=us-west-2\n\n# Azure credentials\nexport AZURE_STORAGE_CONNECTION_STRING=\"DefaultEndpointsProtocol=https;...\"\n\n# Google Cloud credentials\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json\n\n# HTTP proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=https://proxy.company.com:8080\n</code></pre>"},{"location":"rangereader/user-guide/configuration/#extending-rangereader-functionality","title":"Extending RangeReader Functionality","text":"<p>The Tileverse Range Reader library is designed to be highly extensible, allowing you to easily add support for new data sources or custom protocols beyond the built-in <code>file://</code>, <code>http(s)://</code>, <code>s3://</code>, and <code>gs://</code> options (cloud providers like Azure are automatically detected from <code>http(s)</code> URLs).</p> <p>This is achieved through a powerful plugin mechanism. If you have a unique storage system or a specific way of accessing data that isn't covered by the standard implementations, you can create your own \"custom reader\" and integrate it seamlessly with the library.</p> <p>Once your custom reader is developed and properly configured, the <code>RangeReaderFactory</code> will automatically discover it and use it when you request a <code>RangeReader</code> for a URI that your custom reader can handle. This means you can extend the library's capabilities without modifying its core code.</p> <p>For detailed technical instructions on how to develop and register a new custom reader, please refer to the Extension Architecture section in the Developer Guide.</p>"},{"location":"rangereader/user-guide/configuration/#resource-management-patterns","title":"Resource Management Patterns","text":""},{"location":"rangereader/user-guide/configuration/#short-term-usage","title":"Short-term Usage","text":"<p>For processing individual files, batch jobs, or one-time operations, use try-with-resources:</p> <pre><code>// \u2705 Short-term access pattern\npublic ByteBuffer processFile(URI dataSource, long offset, int length) throws IOException {\n    try (RangeReader reader = S3RangeReader.builder()\n            .uri(dataSource)\n            .withCaching()\n            .build()) {\n\n        // Validate parameters\n        if (offset &lt; 0 || length &lt; 0) {\n            throw new IllegalArgumentException(\"Offset and length must be non-negative\");\n        }\n\n        // Check bounds  \n        if (offset &gt;= reader.size()) {\n            return ByteBuffer.allocate(0); // Empty buffer for reads beyond EOF\n        }\n\n        // Perform read and return\n        ByteBuffer result = reader.readRange(offset, length);\n        result.flip(); // Prepare buffer for reading\n        return result;\n\n    } catch (IOException e) {\n        logger.error(\"Failed to read range [{}:{}] from {}: {}\", \n            offset, length, dataSource, e.getMessage());\n        throw e;\n    }\n}\n</code></pre> <p>Best for: - Batch processing jobs - One-time file analysis - Command-line tools - Simple applications</p>"},{"location":"rangereader/user-guide/configuration/#long-term-usage","title":"Long-term Usage","text":"<p>For server applications, services, or long-running processes, manage lifecycle explicitly:</p> <pre><code>// \u2705 Long-term access pattern\npublic class TileServer implements Closeable {\n    private final RangeReader reader;\n    private final ExecutorService executor;\n\n    public TileServer(URI dataSource) throws IOException {\n        // Create optimized reader for server use\n        this.reader = CachingRangeReader.builder(\n            DiskCachingRangeReader.builder(\n                S3RangeReader.builder()\n                    .uri(dataSource)\n                    .region(Region.US_WEST_2)\n                    .build())\n                .maxCacheSizeBytes(5L * 1024 * 1024 * 1024) // 5GB cache\n                .build())\n            .maximumSize(2000)  // Large memory cache\n            .recordStats()      // Monitor performance\n            .build();\n\n        this.executor = Executors.newFixedThreadPool(10);\n    }\n\n    public CompletableFuture&lt;byte[]&gt; getTileAsync(long offset, int size) {\n        return CompletableFuture.supplyAsync(() -&gt; {\n            try {\n                // Reader stays open for multiple requests\n                ByteBuffer buffer = reader.readRange(offset, size);\n                byte[] result = new byte[buffer.remaining()];\n                buffer.get(result);\n                return result;\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }, executor);\n    }\n\n    @Override\n    public void close() throws IOException {\n        try {\n            executor.shutdown();\n            if (!executor.awaitTermination(30, TimeUnit.SECONDS)) {\n                executor.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n            Thread.currentThread().interrupt();\n        } finally {\n            reader.close(); // \u26a0\ufe0f Essential: close when service shuts down\n        }\n    }\n}\n</code></pre> <p>Best for: - Web servers - Microservices - Desktop applications - Data processing services</p>"},{"location":"rangereader/user-guide/configuration/#key-principles","title":"Key Principles","text":"<ol> <li>Short-term: Use try-with-resources for automatic cleanup</li> <li>Long-term: Explicit lifecycle management with proper shutdown hooks</li> <li>Always close: Ensure readers are closed to release resources</li> <li>Thread safety: All readers support concurrent access safely</li> </ol>"},{"location":"rangereader/user-guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication: Detailed authentication setup</li> <li>Troubleshooting: Common configuration issues</li> <li>Performance Guide: Advanced optimization techniques</li> </ul>"},{"location":"rangereader/user-guide/installation/","title":"Installation","text":"<p>This guide explains how to add the Tileverse Range Reader library to your Java project.</p>"},{"location":"rangereader/user-guide/installation/#requirements","title":"Requirements","text":"<ul> <li>Java 17+: Minimum runtime version</li> <li>Maven 3.9+ or Gradle 7.0+: For dependency management</li> </ul>"},{"location":"rangereader/user-guide/installation/#maven-installation","title":"Maven Installation","text":""},{"location":"rangereader/user-guide/installation/#using-the-bom-recommended","title":"Using the BOM (Recommended)","text":"<p>The project provides a Bill of Materials (BOM) to manage dependency versions:</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-bom&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n\n&lt;dependencies&gt;\n    &lt;!-- Now you can omit versions - they're managed by the BOM --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n        &lt;artifactId&gt;tileverse-rangereader-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Add cloud provider modules as needed --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n        &lt;artifactId&gt;tileverse-rangereader-s3&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"rangereader/user-guide/installation/#all-modules-simple-approach","title":"All Modules (Simple Approach)","text":"<p>Include all functionality with a single dependency:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-all&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>No More Netty Conflicts</p> <p>A major benefit of this library is that the <code>s3</code> and <code>azure</code> modules can be used together without causing <code>netty</code> dependency conflicts.</p> <p>Historically, using the AWS and Azure Java SDKs in the same project was challenging because they relied on incompatible versions of Netty. This library solves that problem by using alternative HTTP clients (Apache HttpClient for S3, <code>java.net.HttpClient</code> for Azure), removing Netty entirely. You can now build multi-cloud applications without complex dependency management.</p>"},{"location":"rangereader/user-guide/installation/#individual-modules-without-bom","title":"Individual Modules (Without BOM)","text":"<p>If you prefer not to use the BOM, specify versions explicitly:</p>"},{"location":"rangereader/user-guide/installation/#core-module-required","title":"Core Module (Required)","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-core&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"rangereader/user-guide/installation/#cloud-provider-modules","title":"Cloud Provider Modules","text":"Amazon S3Azure Blob StorageGoogle Cloud Storage <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-s3&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-azure&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-gcs&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"rangereader/user-guide/installation/#dependency-management-boms","title":"Dependency Management BOMs","text":"<p>The project provides two BOMs for different use cases:</p>"},{"location":"rangereader/user-guide/installation/#tileverse-bom","title":"Tileverse BOM","text":"<p>Manages versions of all Tileverse Range Reader modules:</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-bom&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>"},{"location":"rangereader/user-guide/installation/#dependencies-bom","title":"Dependencies BOM","text":"<p>Manages versions of third-party dependencies (for library developers):</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.tileverse&lt;/groupId&gt;\n            &lt;artifactId&gt;tileverse-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre> <p>This BOM includes managed versions for:</p> <ul> <li>AWS SDK components</li> <li>Azure Storage SDK components  </li> <li>Google Cloud Storage SDK components</li> <li>Jackson (JSON processing)</li> <li>Caffeine (caching)</li> </ul>"},{"location":"rangereader/user-guide/installation/#gradle-installation","title":"Gradle Installation","text":""},{"location":"rangereader/user-guide/installation/#using-the-bom-recommended_1","title":"Using the BOM (Recommended)","text":"<pre><code>dependencyManagement {\n    imports {\n        mavenBom 'io.tileverse:tileverse-bom:1.0-SNAPSHOT'\n    }\n}\n\ndependencies {\n    // Versions managed by the BOM\n    implementation 'io.tileverse.rangereader:tileverse-rangereader-core'\n    implementation 'io.tileverse.rangereader:tileverse-rangereader-s3'\n}\n</code></pre>"},{"location":"rangereader/user-guide/installation/#all-modules","title":"All Modules","text":"<pre><code>implementation 'io.tileverse.rangereader:tileverse-rangereader-all:1.0-SNAPSHOT'\n</code></pre>"},{"location":"rangereader/user-guide/installation/#individual-modules","title":"Individual Modules","text":"<pre><code>// Core module (required)\nimplementation 'io.tileverse.rangereader:tileverse-rangereader-core:1.0-SNAPSHOT'\n\n// Cloud provider modules (optional)\nimplementation 'io.tileverse.rangereader:tileverse-rangereader-s3:1.0-SNAPSHOT'\nimplementation 'io.tileverse.rangereader:tileverse-rangereader-azure:1.0-SNAPSHOT'\nimplementation 'io.tileverse.rangereader:tileverse-rangereader-gcs:1.0-SNAPSHOT'\n</code></pre>"},{"location":"rangereader/user-guide/installation/#version-compatibility","title":"Version Compatibility","text":"Library Version Java Version Maven Version 1.0.x 17+ 3.9+"},{"location":"rangereader/user-guide/installation/#verify-installation","title":"Verify Installation","text":"<p>Create a simple test to verify the installation:</p> <pre><code>import io.tileverse.rangereader.FileRangeReader;\nimport java.nio.file.Path;\nimport java.nio.file.Files;\n\npublic class InstallationTest {\n    public static void main(String[] args) throws Exception {\n        // Create a temporary test file\n        Path testFile = Files.createTempFile(\"test\", \".bin\");\n        Files.write(testFile, \"Hello, World!\".getBytes());\n\n        // Test the library\n        try (var reader = FileRangeReader.builder()\n                .path(testFile)\n                .build()) {\n\n            var data = reader.readRange(0, 5);\n            String result = new String(data.array(), 0, data.remaining());\n            System.out.println(\"Read: \" + result); // Should print \"Hello\"\n\n            System.out.println(\"Installation successful!\");\n        }\n\n        // Clean up\n        Files.deleteIfExists(testFile);\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/installation/#migration-guide","title":"Migration Guide","text":""},{"location":"rangereader/user-guide/installation/#from-other-range-reading-libraries","title":"From Other Range Reading Libraries","text":"<p>Common migration patterns:</p> <ul> <li>Map offset/length operations to <code>readRange()</code> calls</li> <li>Replace custom caching with built-in decorators  </li> <li>Adopt builder patterns for configuration instead of constructors</li> </ul>"},{"location":"rangereader/user-guide/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start: Basic usage examples</li> <li>Configuration: Performance optimization</li> <li>Authentication: Cloud provider setup</li> </ul>"},{"location":"rangereader/user-guide/quick-start/","title":"Quick Start","text":"<p>Get started with the Tileverse Range Reader library in minutes with these basic examples.</p>"},{"location":"rangereader/user-guide/quick-start/#basic-usage","title":"Basic Usage","text":""},{"location":"rangereader/user-guide/quick-start/#reading-from-local-files","title":"Reading from Local Files","text":"<pre><code>import io.tileverse.rangereader.FileRangeReader;\nimport java.nio.ByteBuffer;\nimport java.nio.file.Path;\n\ntry (var reader = FileRangeReader.builder()\n        .path(Path.of(\"data.bin\"))\n        .build()) {\n\n    // Read first 1024 bytes\n    ByteBuffer header = reader.readRange(0, 1024);\n    header.flip(); // Prepare buffer for reading\n\n    // Read a specific section\n    ByteBuffer chunk = reader.readRange(50000, 8192);\n    chunk.flip(); // Prepare buffer for reading\n\n    // Get total file size\n    long size = reader.size();\n\n    System.out.println(\"File size: \" + size + \" bytes\");\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#reading-from-http","title":"Reading from HTTP","text":"<pre><code>import io.tileverse.rangereader.HttpRangeReader;\nimport java.net.URI;\n\ntry (var reader = HttpRangeReader.builder()\n        .uri(URI.create(\"https://example.com/data.bin\"))\n        .build()) {\n\n    // Read range from remote file\n    ByteBuffer data = reader.readRange(1000, 500);\n    data.flip(); // Prepare buffer for reading\n\n    System.out.println(\"Read \" + data.remaining() + \" bytes\");\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#reading-from-amazon-s3","title":"Reading from Amazon S3","text":"<pre><code>import io.tileverse.rangereader.s3.S3RangeReader;\nimport software.amazon.awssdk.regions.Region;\nimport java.net.URI;\n\ntry (var reader = S3RangeReader.builder()\n        .uri(URI.create(\"s3://my-bucket/data.bin\"))\n        .region(Region.US_WEST_2)\n        .build()) {\n\n    // Read from S3 object\n    ByteBuffer data = reader.readRange(0, 1024);\n\n    System.out.println(\"Read from S3: \" + data.remaining() + \" bytes\");\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#performance-optimization","title":"Performance Optimization","text":""},{"location":"rangereader/user-guide/quick-start/#adding-memory-caching","title":"Adding Memory Caching","text":"<p>Memory caching is most beneficial for cloud storage where network latency is significant:</p> <pre><code>import io.tileverse.rangereader.cache.CachingRangeReader;\n\n// Use caching with cloud storage for maximum benefit\nvar baseReader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://my-bucket/large-file.bin\"))\n    .region(Region.US_WEST_2)\n    .build();\n\ntry (var cachedReader = CachingRangeReader.builder(baseReader)\n        .maximumSize(1000)  // Cache up to 1000 ranges\n        .build()) {\n\n    // First read - network request to S3\n    ByteBuffer data1 = cachedReader.readRange(0, 1024);\n\n    // Second read - served from cache (much faster, no network)\n    ByteBuffer data2 = cachedReader.readRange(0, 1024);\n}\n</code></pre> <p>Note: For local files, caching provides little benefit since the OS already caches file data efficiently.</p>"},{"location":"rangereader/user-guide/quick-start/#disk-caching-for-large-datasets","title":"Disk Caching for Large Datasets","text":"<pre><code>import io.tileverse.rangereader.cache.DiskCachingRangeReader;\n\nvar s3Reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/large-file.bin\"))\n    .build();\n\ntry (var cachedReader = DiskCachingRangeReader.builder(s3Reader)\n        .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB cache\n        .build()) {\n\n    // Reads are cached to disk for persistence across sessions\n    ByteBuffer data = cachedReader.readRange(100, 500);\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#multi-level-caching","title":"Multi-Level Caching","text":"<pre><code>// Optimal configuration for cloud storage\ntry (var optimizedReader = CachingRangeReader.builder(\n        DiskCachingRangeReader.builder(\n            S3RangeReader.builder()\n                .uri(URI.create(\"s3://bucket/data.bin\"))\n                .build())\n            .maxCacheSizeBytes(10L * 1024 * 1024 * 1024)  // 10GB disk cache\n            .build())\n        .maximumSize(1000)  // 1000 entries in memory\n        .build()) {\n\n    // Highly optimized reads with multiple caching layers\n    ByteBuffer data = optimizedReader.readRange(offset, length);\n    data.flip(); // Prepare buffer for reading\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#working-with-bytebuffers","title":"Working with ByteBuffers","text":""},{"location":"rangereader/user-guide/quick-start/#reusing-buffers-recommended","title":"Reusing Buffers (Recommended)","text":"<pre><code>// Efficient: Reuse the same buffer\nByteBuffer buffer = ByteBuffer.allocate(8192);\n\nfor (long offset = 0; offset &lt; fileSize; offset += 8192) {\n    buffer.clear();  // Reset for writing\n\n    int bytesRead = reader.readRange(offset, 8192, buffer);\n    buffer.flip(); // Prepare buffer for reading\n\n    // Process buffer contents\n    processData(buffer);\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#direct-buffers-for-large-reads","title":"Direct Buffers for Large Reads","text":"<pre><code>// For large reads, use direct buffers\nByteBuffer directBuffer = ByteBuffer.allocateDirect(1024 * 1024);\n\ntry {\n    int bytesRead = reader.readRange(0, 1024 * 1024, directBuffer);\n    directBuffer.flip();\n\n    // Process large chunk efficiently\n    processLargeData(directBuffer);\n} finally {\n    // Clean up direct buffer if needed\n    if (directBuffer.isDirect()) {\n        ((DirectBuffer) directBuffer).cleaner().clean();\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#error-handling","title":"Error Handling","text":"<pre><code>import java.io.IOException;\n\ntry (var reader = FileRangeReader.builder()\n        .path(Path.of(\"data.bin\"))\n        .build()) {\n\n    // Validate before reading\n    long fileSize = reader.size();\n    long offset = 1000;\n    int length = 500;\n\n    if (offset &gt;= fileSize) {\n        System.out.println(\"Offset beyond file end\");\n        return;\n    }\n\n    // Adjust length if it extends beyond EOF\n    if (offset + length &gt; fileSize) {\n        length = (int) (fileSize - offset);\n    }\n\n    ByteBuffer data = reader.readRange(offset, length);\n    data.flip(); // Prepare buffer for reading\n\n} catch (IOException e) {\n    System.err.println(\"Failed to read data: \" + e.getMessage());\n} catch (IllegalArgumentException e) {\n    System.err.println(\"Invalid parameters: \" + e.getMessage());\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#common-patterns","title":"Common Patterns","text":""},{"location":"rangereader/user-guide/quick-start/#reading-file-headers","title":"Reading File Headers","text":"<pre><code>// Read different header formats\ntry (var reader = FileRangeReader.builder()\n        .path(Path.of(\"image.tiff\"))\n        .build()) {\n\n    // Read TIFF header\n    ByteBuffer header = reader.readRange(0, 16);\n    header.flip(); // Prepare buffer for reading\n\n    // Check magic number\n    short magic = header.getShort();\n\n    if (magic == 0x4949 || magic == 0x4D4D) {\n        System.out.println(\"Valid TIFF file\");\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#streaming-large-files","title":"Streaming Large Files","text":"<pre><code>// Process large files in chunks\npublic void processLargeFile(Path filePath, int chunkSize) throws IOException {\n    try (var reader = FileRangeReader.builder()\n            .path(filePath)\n            .build()) {\n\n        long fileSize = reader.size();\n        long processed = 0;\n\n        while (processed &lt; fileSize) {\n            int currentChunkSize = (int) Math.min(chunkSize, fileSize - processed);\n\n            ByteBuffer chunk = reader.readRange(processed, currentChunkSize);\n            chunk.flip(); // Prepare buffer for reading\n\n            // Process this chunk\n            processChunk(chunk);\n\n            processed += currentChunkSize;\n\n            // Report progress\n            double progress = (double) processed / fileSize * 100;\n            System.out.printf(\"Progress: %.1f%%\\n\", progress);\n        }\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration: Learn about performance tuning</li> <li>Authentication: Set up cloud provider access</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"rangereader/user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions when using the Tileverse Range Reader library.</p>"},{"location":"rangereader/user-guide/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"rangereader/user-guide/troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Problem: Maven/Gradle dependency conflicts with AWS, Azure, or Google Cloud SDKs.</p> <p>Solution: Use the BOM (Bill of Materials) for version alignment:</p> <pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;!-- AWS BOM --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;\n            &lt;artifactId&gt;bom&lt;/artifactId&gt;\n            &lt;version&gt;2.31.70&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Azure BOM --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.azure&lt;/groupId&gt;\n            &lt;artifactId&gt;azure-sdk-bom&lt;/artifactId&gt;\n            &lt;version&gt;1.2.28&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#java-version-issues","title":"Java Version Issues","text":"<p>Problem: <code>UnsupportedClassVersionError</code> or similar Java version errors.</p> <p>Solution: Ensure you're using Java 17 or higher:</p> <pre><code>java -version\n# Should show version 17 or higher\n\n# Set JAVA_HOME if needed\nexport JAVA_HOME=/path/to/java17\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#missing-module-errors","title":"Missing Module Errors","text":"<p>Problem: <code>ClassNotFoundException</code> for cloud provider classes.</p> <p>Solution: Include the specific module dependency:</p> <pre><code>&lt;!-- For S3 support --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.rangereader&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-rangereader-s3&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"rangereader/user-guide/troubleshooting/#aws-s3-authentication","title":"AWS S3 Authentication","text":"<p>Problem: <code>SdkClientException: Unable to load AWS credentials</code></p> <p>Solutions:</p> <ol> <li> <p>Set environment variables:    <pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre></p> </li> <li> <p>Create AWS credentials file:    <pre><code>mkdir -p ~/.aws\ncat &gt; ~/.aws/credentials &lt;&lt; EOF\n[default]\naws_access_key_id = your-access-key\naws_secret_access_key = your-secret-key\nEOF\n</code></pre></p> </li> <li> <p>Use IAM role (on EC2/ECS):    <pre><code>// No explicit credentials needed - uses instance profile\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .region(Region.US_WEST_2)\n    .build();\n</code></pre></p> </li> </ol> <p>Problem: <code>S3Exception: Access Denied (Service: S3, Status Code: 403)</code></p> <p>Solutions:</p> <ol> <li> <p>Check bucket permissions:    <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\"],\n      \"Resource\": \"arn:aws:s3:::your-bucket/*\"\n    }\n  ]\n}\n</code></pre></p> </li> <li> <p>Verify object exists:    <pre><code>aws s3 ls s3://your-bucket/your-key\n</code></pre></p> </li> <li> <p>Check region:    <pre><code>// Ensure region matches bucket region\nvar reader = S3RangeReader.builder()\n    .uri(URI.create(\"s3://bucket/key\"))\n    .region(Region.US_WEST_2)  // Correct region\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#azure-blob-storage-authentication","title":"Azure Blob Storage Authentication","text":"<p>Problem: <code>BlobStorageException: AuthenticationFailed</code></p> <p>Solutions:</p> <ol> <li> <p>Verify connection string:    <pre><code>var connectionString = \"DefaultEndpointsProtocol=https;\" +\n    \"AccountName=youraccount;\" +\n    \"AccountKey=yourkey;\" +\n    \"EndpointSuffix=core.windows.net\";\n</code></pre></p> </li> <li> <p>Check SAS token expiration:    <pre><code># Decode SAS token to check expiry\necho \"sv=2020-08-04&amp;se=2024-12-31...\" | base64 -d\n</code></pre></p> </li> <li> <p>Test connectivity:    <pre><code>az storage blob list --account-name youraccount --container-name yourcontainer\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#google-cloud-storage-authentication","title":"Google Cloud Storage Authentication","text":"<p>Problem: <code>GoogleCloudStorageException: 403 Forbidden</code></p> <p>Solutions:</p> <ol> <li> <p>Set service account key:    <pre><code>export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json\n</code></pre></p> </li> <li> <p>Test authentication:    <pre><code>gcloud auth application-default login\ngsutil ls gs://your-bucket/\n</code></pre></p> </li> <li> <p>Check service account permissions:    <pre><code>gcloud projects get-iam-policy your-project-id\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"rangereader/user-guide/troubleshooting/#slow-read-performance","title":"Slow Read Performance","text":"<p>Problem: Range reads are slower than expected.</p> <p>Solutions:</p> <ol> <li> <p>Enable caching:    <pre><code>var reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(1000)\n    .build();\n</code></pre></p> </li> <li> <p>Use disk caching for persistent storage:    <pre><code>// For large datasets, use disk caching\nvar reader = DiskCachingRangeReader.builder(cloudReader)\n    .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB cache\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: Application uses too much memory.</p> <p>Solutions:</p> <ol> <li> <p>Use soft references in cache:    <pre><code>var reader = CachingRangeReader.builder(baseReader)\n    .softValues()  // Allow GC to reclaim memory\n    .build();\n</code></pre></p> </li> <li> <p>Limit cache size:    <pre><code>var reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(100)  // Limit entries\n    .maxSizeBytes(64 * 1024 * 1024)  // 64MB limit\n    .build();\n</code></pre></p> </li> <li> <p>Use disk caching instead:    <pre><code>var reader = DiskCachingRangeReader.builder(baseReader)\n    .maxCacheSizeBytes(1024 * 1024 * 1024)  // 1GB on disk\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#cache-not-working","title":"Cache Not Working","text":"<p>Problem: Cache statistics show low hit rates.</p> <p>Solutions:</p> <ol> <li> <p>Check cache configuration:    <pre><code>if (reader instanceof CachingRangeReader cachingReader) {\n    var stats = cachingReader.getCacheStats();\n    System.out.println(\"Hit rate: \" + stats.hitRate());\n    System.out.println(\"Miss count: \" + stats.missCount());\n}\n</code></pre></p> </li> <li> <p>Ensure consistent read patterns:    <pre><code>// Good: Consistent block-aligned reads\nfor (int i = 0; i &lt; 10; i++) {\n    reader.readRange(i * 1024, 1024);  // Cache-friendly\n}\n\n// Bad: Random, unaligned reads\nreader.readRange(100, 500);   // Won't benefit from caching\nreader.readRange(1500, 300);\n</code></pre></p> </li> <li> <p>Use appropriate read patterns:    <pre><code>// Ensure consistent read patterns to improve cache hits\nvar reader = CachingRangeReader.builder(baseReader)\n    .maximumSize(1000)\n    .build();\n\n// Read in consistent chunks\nint chunkSize = 64 * 1024;  // 64KB chunks\nfor (int i = 0; i &lt; 10; i++) {\n    reader.readRange(i * chunkSize, chunkSize);  // Cache-friendly\n}\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#network-issues","title":"Network Issues","text":""},{"location":"rangereader/user-guide/troubleshooting/#connection-timeouts","title":"Connection Timeouts","text":"<p>Problem: <code>SocketTimeoutException</code> or connection timeouts.</p> <p>Solutions:</p> <ol> <li> <p>Increase timeouts:    <pre><code>var reader = HttpRangeReader.builder()\n    .uri(uri)\n    .connectTimeout(Duration.ofSeconds(30))\n    .readTimeout(Duration.ofMinutes(5))\n    .build();\n</code></pre></p> </li> <li> <p>Configure retries:    <pre><code>var reader = HttpRangeReader.builder()\n    .uri(uri)\n    .maxRetries(3)\n    .retryDelay(Duration.ofSeconds(1))\n    .build();\n</code></pre></p> </li> <li> <p>For S3, configure client:    <pre><code>var s3Client = S3Client.builder()\n    .overrideConfiguration(ClientOverrideConfiguration.builder()\n        .apiCallTimeout(Duration.ofMinutes(2))\n        .apiCallAttemptTimeout(Duration.ofSeconds(30))\n        .build())\n    .build();\n\nvar reader = S3RangeReader.builder()\n    .client(s3Client)\n    .bucket(\"bucket\")\n    .key(\"key\")\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#proxy-configuration","title":"Proxy Configuration","text":"<p>Problem: Cannot connect through corporate proxy.</p> <p>Solutions:</p> <ol> <li> <p>Set system properties:    <pre><code>-Dhttp.proxyHost=proxy.company.com\n-Dhttp.proxyPort=8080\n-Dhttps.proxyHost=proxy.company.com\n-Dhttps.proxyPort=8080\n</code></pre></p> </li> <li> <p>Configure AWS SDK proxy:    <pre><code>var proxyConfig = ProxyConfiguration.builder()\n    .endpoint(URI.create(\"http://proxy.company.com:8080\"))\n    .username(\"proxyuser\")\n    .password(\"proxypass\")\n    .build();\n\nvar s3Client = S3Client.builder()\n    .overrideConfiguration(ClientOverrideConfiguration.builder()\n        .proxyConfiguration(proxyConfig)\n        .build())\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#ssltls-issues","title":"SSL/TLS Issues","text":"<p>Problem: SSL certificate validation errors.</p> <p>Solutions:</p> <ol> <li> <p>For development only - disable SSL verification:    <pre><code>// NOT recommended for production\nvar reader = HttpRangeReader.builder()\n    .uri(uri)\n    .trustAllCertificates(true)\n    .build();\n</code></pre></p> </li> <li> <p>Add custom certificate to truststore:    <pre><code>keytool -import -alias custom-cert -file cert.crt -keystore $JAVA_HOME/lib/security/cacerts\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#file-system-issues","title":"File System Issues","text":""},{"location":"rangereader/user-guide/troubleshooting/#file-access-permissions","title":"File Access Permissions","text":"<p>Problem: <code>AccessDeniedException</code> when reading local files.</p> <p>Solutions:</p> <ol> <li> <p>Check file permissions:    <pre><code>ls -la /path/to/file\nchmod 644 /path/to/file  # Make readable\n</code></pre></p> </li> <li> <p>Verify file exists:    <pre><code>Path filePath = Path.of(\"/path/to/file\");\nif (!Files.exists(filePath)) {\n    throw new FileNotFoundException(\"File not found: \" + filePath);\n}\nif (!Files.isReadable(filePath)) {\n    throw new IOException(\"File not readable: \" + filePath);\n}\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#disk-cache-issues","title":"Disk Cache Issues","text":"<p>Problem: Disk cache not working or filling up disk.</p> <p>Solutions:</p> <ol> <li> <p>Check disk space:    <pre><code>df -h /tmp/rangereader-cache\n</code></pre></p> </li> <li> <p>Configure cache location:    <pre><code>var reader = DiskCachingRangeReader.builder(baseReader)\n    .cacheDirectory(\"/var/cache/rangereader\")  // Custom location\n    .maxCacheSizeBytes(5L * 1024 * 1024 * 1024)  // 5GB limit\n    .build();\n</code></pre></p> </li> <li> <p>Enable cleanup on close:    <pre><code>var reader = DiskCachingRangeReader.builder(baseReader)\n    .deleteOnClose()  // Clean up when done\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"rangereader/user-guide/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>// Add to your application startup\nSystem.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"DEBUG\");\nSystem.setProperty(\"org.slf4j.simpleLogger.log.io.tileverse.rangereader\", \"DEBUG\");\n\n// For AWS SDK\nSystem.setProperty(\"org.slf4j.simpleLogger.log.software.amazon.awssdk\", \"DEBUG\");\n\n// For Azure SDK\nSystem.setProperty(\"org.slf4j.simpleLogger.log.com.azure\", \"DEBUG\");\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#monitor-cache-performance","title":"Monitor Cache Performance","text":"<pre><code>public void monitorCache(RangeReader reader) {\n    if (reader instanceof CachingRangeReader cachingReader) {\n        var stats = cachingReader.getCacheStats();\n\n        System.out.println(\"Cache Statistics:\");\n        System.out.println(\"  Hit Rate: \" + String.format(\"%.2f%%\", stats.hitRate() * 100));\n        System.out.println(\"  Requests: \" + stats.requestCount());\n        System.out.println(\"  Hits: \" + stats.hitCount());\n        System.out.println(\"  Misses: \" + stats.missCount());\n        System.out.println(\"  Evictions: \" + stats.evictionCount());\n        System.out.println(\"  Size: \" + stats.estimatedSize());\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#test-connectivity","title":"Test Connectivity","text":"<pre><code>public void testConnectivity(URI uri) {\n    try {\n        var reader = createReader(uri);\n        long size = reader.size();\n        System.out.println(\"Successfully connected to \" + uri + \", size: \" + size);\n        reader.close();\n    } catch (Exception e) {\n        System.err.println(\"Failed to connect to \" + uri + \": \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#profile-performance","title":"Profile Performance","text":"<pre><code>public void profileReads(RangeReader reader) {\n    int numReads = 100;\n    int blockSize = 64 * 1024;\n\n    long startTime = System.nanoTime();\n\n    for (int i = 0; i &lt; numReads; i++) {\n        try {\n            reader.readRange(i * blockSize, blockSize);\n        } catch (IOException e) {\n            System.err.println(\"Read failed at offset \" + (i * blockSize));\n        }\n    }\n\n    long endTime = System.nanoTime();\n    double durationMs = (endTime - startTime) / 1_000_000.0;\n\n    System.out.println(\"Read \" + numReads + \" blocks in \" + durationMs + \"ms\");\n    System.out.println(\"Average: \" + (durationMs / numReads) + \"ms per read\");\n}\n</code></pre>"},{"location":"rangereader/user-guide/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the logs for detailed error messages</li> <li>Search GitHub issues for similar problems</li> <li>Create a minimal reproduction case</li> <li>Submit an issue with:</li> <li>Library version</li> <li>Java version</li> <li>Operating system</li> <li>Complete error message and stack trace</li> <li>Minimal code example</li> </ol>"},{"location":"rangereader/user-guide/troubleshooting/#common-error-messages","title":"Common Error Messages","text":"Error Likely Cause Solution <code>ClassNotFoundException</code> Missing module dependency Add required module to dependencies <code>Access Denied (403)</code> Authentication/authorization Check credentials and permissions <code>NoSuchFileException</code> File not found Verify file/object exists <code>SocketTimeoutException</code> Network timeout Increase timeout or check connectivity <code>OutOfMemoryError</code> Large cache or buffer usage Reduce cache size or use disk caching <code>UnsupportedClassVersionError</code> Wrong Java version Use Java 17 or higher"},{"location":"tilematrixset/","title":"Tileverse Tile Matrix Set","text":"<p>Generic object model for defining tile pyramids and tiling schemes.</p>"},{"location":"tilematrixset/#overview","title":"Overview","text":"<p>Tileverse Tile Matrix Set provides Java implementations of tile pyramid concepts and OGC Tile Matrix Set standard. It includes models for working with tile coordinates, tile ranges, and standard tiling schemes like Web Mercator.</p>"},{"location":"tilematrixset/#features","title":"Features","text":"<ul> <li>Standard tile matrix sets: Web Mercator, WGS84, and custom definitions</li> <li>Coordinate transformations: Convert between geographic and tile coordinates</li> <li>Flexible tiling schemes: Support for various CRS and tile configurations</li> <li>Tile pyramid models: Generic abstractions for tiled data structures</li> </ul>"},{"location":"tilematrixset/#quick-start","title":"Quick Start","text":"<pre><code>import io.tileverse.tiling.matrix.TileMatrixSet;\nimport io.tileverse.tiling.matrix.DefaultTileMatrixSets;\nimport io.tileverse.tiling.pyramid.TileIndex;\n\n// Use a standard tile matrix set\nTileMatrixSet webMercator = DefaultTileMatrixSets.WEB_MERCATOR_QUAD;\n\n// Get tile matrix for zoom level 10\nTileMatrix matrix = webMercator.tileMatrix(10);\n\n// Convert geographic bounds to tile range\nBoundingBox2D bbox = new BoundingBox2D(-122.5, 37.7, -122.3, 37.9);\nTileRange tiles = matrix.getTilesIntersecting(bbox);\n\nSystem.out.printf(\"Tiles at zoom %d: %s%n\", 10, tiles);\n</code></pre>"},{"location":"tilematrixset/#use-cases","title":"Use Cases","text":"<ul> <li>Tile coordinate calculations: Convert between geographic and tile coordinates</li> <li>Tile server development: Implement standard tiling schemes</li> <li>Spatial indexing: Use tile coordinates for data organization</li> <li>Multi-resolution data: Work with pyramidal tile structures</li> </ul>"},{"location":"tilematrixset/#getting-started","title":"Getting Started","text":"<ul> <li> <p> User Guide</p> <p>Learn how to work with tile pyramids and matrix sets.</p> <p> User Guide</p> </li> </ul>"},{"location":"tilematrixset/#related-modules","title":"Related Modules","text":"<ul> <li>PMTiles: Uses tile coordinates from matrix sets</li> <li>Vector Tiles: Often organized in tile pyramids</li> </ul>"},{"location":"tilematrixset/#requirements","title":"Requirements","text":"<ul> <li>Java 17+: Minimum runtime version</li> </ul>"},{"location":"tilematrixset/#license","title":"License","text":"<p>Licensed under the Apache License, Version 2.0.</p>"},{"location":"tilematrixset/user-guide/","title":"Tile Matrix Set User Guide","text":"<p>Learn how to work with tile pyramids and matrix sets.</p>"},{"location":"tilematrixset/user-guide/#installation","title":"Installation","text":"MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.tilematrixset&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-tilematrixset&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>implementation 'io.tileverse.tilematrixset:tileverse-tilematrixset:1.1-SNAPSHOT'\n</code></pre>"},{"location":"tilematrixset/user-guide/#topics","title":"Topics","text":"<ul> <li>Quick Start</li> <li>Tile Pyramids</li> <li>Standard Sets</li> </ul>"},{"location":"tilematrixset/user-guide/quick-start/","title":"Quick Start","text":"<p>Coming Soon</p> <p>Detailed documentation is under development.</p>"},{"location":"tilematrixset/user-guide/standard-sets/","title":"Standard Sets","text":"<p>Coming Soon</p> <p>Detailed documentation is under development.</p>"},{"location":"tilematrixset/user-guide/tile-pyramids/","title":"Tile Pyramids","text":"<p>Coming Soon</p> <p>Detailed documentation is under development.</p>"},{"location":"vectortiles/","title":"Tileverse Vector Tiles","text":"<p>Encoding and decoding Mapbox Vector Tiles (MVT) in Java.</p>"},{"location":"vectortiles/#overview","title":"Overview","text":"<p>Tileverse Vector Tiles is a Java library for working with Mapbox Vector Tiles (MVT), a compact binary format for storing and transmitting vector data in tiles. The library provides efficient encoding and decoding of MVT data, with full support for the MVT specification.</p>"},{"location":"vectortiles/#what-are-vector-tiles","title":"What are Vector Tiles?","text":"<p>Vector tiles are a method of delivering map data where the geometry is transmitted as vectors (points, lines, polygons) rather than pre-rendered images. This provides several advantages:</p> <ul> <li>Smaller file sizes: Vector data is more compact than raster images</li> <li>Dynamic styling: Style vector data on the client side</li> <li>Better scalability: Adapt to different screen resolutions</li> <li>Interactive features: Query and interact with individual features</li> <li>Efficient updates: Update styling without re-generating tiles</li> </ul>"},{"location":"vectortiles/#features","title":"Features","text":"<ul> <li>MVT format encoding/decoding: Full support for Mapbox Vector Tiles v2 specification</li> <li>Protocol Buffers: Efficient binary serialization</li> <li>Geometry transformations: Convert between coordinate systems</li> <li>Layer and feature manipulation: Work with MVT structure programmatically</li> <li>JTS integration: Use familiar JTS Geometry types</li> <li>High performance: Optimized for server-side tile generation</li> </ul>"},{"location":"vectortiles/#quick-start","title":"Quick Start","text":""},{"location":"vectortiles/#decoding-vector-tiles","title":"Decoding Vector Tiles","text":"<pre><code>import io.tileverse.vectortile.mvt.VectorTileCodec;\nimport io.tileverse.vectortile.model.VectorTile;\nimport org.locationtech.jts.geom.Geometry;\n\n// Create a codec\nVectorTileCodec codec = VectorTileCodec.getDefault();\n\n// Decode MVT bytes\nbyte[] mvtBytes = ...; // from file, network, PMTiles, etc.\nVectorTile tile = codec.decode(mvtBytes);\n\n// Access layers\nfor (VectorTile.Layer layer : tile.getLayers()) {\n    System.out.printf(\"Layer: %s (%d features)%n\",\n        layer.getName(), layer.getFeatures().size());\n\n    // Access features\n    for (VectorTile.Layer.Feature feature : layer.getFeatures()) {\n        Geometry geometry = feature.getGeometry();\n        Map&lt;String, Object&gt; attributes = feature.getAttributes();\n\n        // Process feature...\n    }\n}\n</code></pre>"},{"location":"vectortiles/#encoding-vector-tiles","title":"Encoding Vector Tiles","text":"<pre><code>import io.tileverse.vectortile.mvt.VectorTileBuilder;\nimport io.tileverse.vectortile.mvt.LayerBuilder;\nimport org.locationtech.jts.geom.Point;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.GeometryFactory;\n\n// Create a builder\nVectorTileBuilder tileBuilder = VectorTileBuilder.create()\n    .setExtent(4096);  // Standard tile extent\n\n// Add a layer\nLayerBuilder layerBuilder = tileBuilder.layer(\"cities\");\n\n// Add features\nGeometryFactory gf = new GeometryFactory();\nPoint point = gf.createPoint(new Coordinate(100, 200));\n\nlayerBuilder.feature()\n    .id(1)\n    .geometry(point)\n    .attributes(Map.of(\n        \"name\", \"San Francisco\",\n        \"population\", 800000\n    ));\n\n// Build and encode\nVectorTile tile = tileBuilder.build();\nbyte[] mvtBytes = codec.encode(tile);\n</code></pre>"},{"location":"vectortiles/#use-cases","title":"Use Cases","text":"<ul> <li>Tile server development: Generate MVT tiles on-the-fly</li> <li>Data processing: Convert between vector formats</li> <li>Map rendering: Decode MVT for client-side rendering</li> <li>Spatial analysis: Extract and analyze vector data from tiles</li> <li>PMTiles integration: Work with vector tile content in PMTiles archives</li> </ul>"},{"location":"vectortiles/#performance","title":"Performance","text":"<ul> <li>Efficient Protocol Buffers encoding/decoding</li> <li>Memory-efficient streaming for large tile sets</li> <li>Optimized geometry transformations</li> <li>Thread-safe operations for concurrent processing</li> </ul>"},{"location":"vectortiles/#getting-started","title":"Getting Started","text":"<ul> <li> <p> User Guide</p> <p>Learn how to encode and decode vector tiles.</p> <p> User Guide</p> </li> <li> <p> MVT Specification</p> <p>Understand the Mapbox Vector Tiles format.</p> <p> Specification</p> </li> </ul>"},{"location":"vectortiles/#related-modules","title":"Related Modules","text":"<p>This library works together with other Tileverse modules:</p> <ul> <li>PMTiles: Store vector tiles in PMTiles archives</li> <li>Tile Matrix Set: Work with tile coordinates</li> </ul>"},{"location":"vectortiles/#requirements","title":"Requirements","text":"<ul> <li>Java 17+: Minimum runtime version</li> <li>JTS Topology Suite: For geometry types</li> <li>Protocol Buffers: For MVT encoding/decoding</li> </ul>"},{"location":"vectortiles/#license","title":"License","text":"<p>Licensed under the Apache License, Version 2.0.</p>"},{"location":"vectortiles/user-guide/","title":"Vector Tiles User Guide","text":"<p>Welcome to the Tileverse Vector Tiles User Guide.</p>"},{"location":"vectortiles/user-guide/#overview","title":"Overview","text":"<p>This guide covers encoding and decoding Mapbox Vector Tiles (MVT) in Java.</p>"},{"location":"vectortiles/user-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17 or newer</li> <li>Basic understanding of vector tiles and tiled mapping</li> </ul>"},{"location":"vectortiles/user-guide/#installation","title":"Installation","text":"MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.tileverse.vectortiles&lt;/groupId&gt;\n    &lt;artifactId&gt;tileverse-vectortiles&lt;/artifactId&gt;\n    &lt;version&gt;1.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>implementation 'io.tileverse.vectortiles:tileverse-vectortiles:1.1-SNAPSHOT'\n</code></pre>"},{"location":"vectortiles/user-guide/#topics","title":"Topics","text":"<ul> <li>Quick Start: Get started quickly</li> <li>Encoding Tiles: Create MVT tiles</li> <li>Decoding Tiles: Read MVT tiles</li> </ul>"},{"location":"vectortiles/user-guide/#next-steps","title":"Next Steps","text":"<p>Start with the Quick Start guide.</p>"},{"location":"vectortiles/user-guide/decoding/","title":"Decoding Vector Tiles","text":"<p>Coming Soon</p> <p>Detailed decoding documentation is under development.</p> <p>See Quick Start for basic examples.</p>"},{"location":"vectortiles/user-guide/encoding/","title":"Encoding Vector Tiles","text":"<p>Coming Soon</p> <p>Detailed encoding documentation is under development.</p> <p>See Quick Start for basic examples.</p>"},{"location":"vectortiles/user-guide/quick-start/","title":"Vector Tiles Quick Start","text":"<p>Get started with Tileverse Vector Tiles quickly.</p>"},{"location":"vectortiles/user-guide/quick-start/#decoding-mvt","title":"Decoding MVT","text":"<pre><code>import io.tileverse.vectortile.mvt.VectorTileCodec;\nimport io.tileverse.vectortile.model.VectorTile;\n\nVectorTileCodec codec = VectorTileCodec.getDefault();\nbyte[] mvtBytes = ...; // Load from file, network, etc.\n\nVectorTile tile = codec.decode(mvtBytes);\n\n// Iterate layers and features\nfor (VectorTile.Layer layer : tile.getLayers()) {\n    System.out.println(\"Layer: \" + layer.getName());\n    for (VectorTile.Layer.Feature feature : layer.getFeatures()) {\n        System.out.println(\"  Feature ID: \" + feature.getId());\n        System.out.println(\"  Geometry: \" + feature.getGeometry());\n        System.out.println(\"  Attributes: \" + feature.getAttributes());\n    }\n}\n</code></pre>"},{"location":"vectortiles/user-guide/quick-start/#encoding-mvt","title":"Encoding MVT","text":"<pre><code>import io.tileverse.vectortile.mvt.VectorTileBuilder;\n\nVectorTileBuilder builder = VectorTileBuilder.create();\n\nbuilder.layer(\"poi\")\n    .feature()\n        .geometry(point)\n        .attributes(Map.of(\"name\", \"Restaurant\"));\n\nVectorTile tile = builder.build();\nbyte[] mvtBytes = codec.encode(tile);\n</code></pre>"},{"location":"vectortiles/user-guide/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Encoding Tiles</li> <li>Decoding Tiles</li> </ul>"}]}